name: Build Packages

on:
  workflow_call:
    inputs:
      build_all:
        description: '是否为所有核心系统编译'
        required: true
        default: true
        type: boolean
      core-artifact:
        description: '核心系统Artifact名称（当build_all为false时必需）'
        required: false
        type: string
      package:
        description: '软件包配置'
        required: true
        default: 'Pro'
        type: string
      core-map:
        description: '核心系统映射文件名称（可选，用于批量编译）'
        required: false
        type: string
  workflow_dispatch:
    inputs:
      build_all:
        description: '是否为所有核心系统编译'
        required: true
        default: true
        type: boolean
      core-artifact:
        description: '核心系统Artifact名称（当build_all为false时必需）'
        required: false
      package:
        description: '软件包配置'
        required: true
        default: 'Pro'
        type: choice
        options:
          - Pro
          - Max
          - Ultra
      core-map:
        description: '核心系统映射文件名称（可选，用于批量编译）'
        required: false

jobs:
  # 下载核心系统映射并生成任务矩阵
  generate-package-matrix:
    runs-on: ubuntu-latest
    if: inputs.build_all == 'true' && inputs.core_map != ''
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: 📥 下载映射文件
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.core_map }}
          path: ./

      - name: 📦 生成软件包编译矩阵
        id: set-matrix
        run: |
          # 从映射文件生成矩阵
          matrix=$(jq -c 'to_entries | map({core: .key, artifact: .value, package: "${{ inputs.package }}"})' core-map.json)
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

  # 单个核心系统编译
  build-single-package:
    runs-on: ubuntu-latest
    if: inputs.build_all == 'false'
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 下载核心系统
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.core-artifact }}
          path: core-system

      - name: 🔧 编译软件包
        run: |
          # 执行软件包编译脚本
          chmod +x scripts/build-packages.sh
          ./scripts/build-packages.sh \
            --package "${{ inputs.package }}" \
            --core-path "core-system"

      - name: 📤 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ inputs.package }}-${{ github.run_id }}
          path: |
            firmware/
            reports/
          retention-days: 7

  # 批量编译所有核心系统
  build-all-packages:
    needs: generate-package-matrix
    runs-on: ubuntu-latest
    if: inputs.build_all == 'true' && inputs.core_map != ''
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-package-matrix.outputs.matrix) }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 下载核心系统
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: core-system

      - name: 🔧 编译软件包
        run: |
          # 执行软件包编译脚本
          chmod +x scripts/build-packages.sh
          ./scripts/build-packages.sh \
            --package "${{ matrix.package }}" \
            --core-path "core-system"

      - name: 📤 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.core }}-${{ matrix.package }}-${{ github.run_id }}
          path: |
            firmware/
            reports/
          retention-days: 7

  # 为没有映射文件的情况提供备选方案
  build-packages-without-map:
    runs-on: ubuntu-latest
    if: inputs.build_all == 'true' && (inputs.core_map == '' || needs.generate-package-matrix.result == 'failure')
    strategy:
      fail-fast: false
      matrix:
        chip: [ipq60xx]
        # chip: [ipq60xx, ipq80xx]  # 未来扩展时取消注释
        branch: [openwrt, immwrt, libwrt]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 下载核心系统
        uses: actions/download-artifact@v4
        with:
          name: core-${{ matrix.chip }}-${{ matrix.branch }}-${{ github.run_id }}
          path: core-system

      - name: 🔧 编译软件包
        run: |
          # 执行软件包编译脚本
          chmod +x scripts/build-packages.sh
          ./scripts/build-packages.sh \
            --package "${{ inputs.package }}" \
            --core-path "core-system"

      - name: 📤 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.chip }}-${{ matrix.branch }}-${{ matrix.package }}-${{ github.run_id }}
          path: |
            firmware/
            reports/
          retention-days: 7
