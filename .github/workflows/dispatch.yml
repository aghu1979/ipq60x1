# .github/workflows/dispatch.yml
name: 调度中心

on:
  schedule:
    - cron: '0 16 * * 4' # UTC 周四 16:00 = 北京时间 周五 00:00
  workflow_dispatch:
    inputs:
      os_version:
        description: '选择操作系统版本'
        required: true
        default: 'ubuntu-22.04'
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-24.04

jobs:
  setup:
    name: 📋 准备工作
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      hashes-value: ${{ steps.generate-hashes.outputs.hashes-value }}
      devices: ${{ steps.get-devices.outputs.devices }}
      kernel-version: ${{ steps.get-kernel.outputs.kernel-version }}
    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: 🔑 生成哈希文件
        id: generate-hashes
        run: |
          # 在 run 脚本中定义变量，这是最安全的方式
          CHIPSET='ipq60xx'
          BRANCH='immwrt'
          COLOR_ERROR='\033[1;31m'
          COLOR_SUCCESS='\033[1;32m'
          ICON_ERROR='❌'
          ICON_SUCCESS='✅'
          
          set -euo pipefail
          HASH_FILES=(
            "configs/base_${CHIPSET}.config"
            "configs/base_${BRANCH}.config"
            "scripts/diy.sh"
            "scripts/repo.sh"
          )
          for file in "${HASH_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo -e "${COLOR_ERROR}${ICON_ERROR} 错误: 文件 $file 不存在！${COLOR_RESET}"
              exit 1
            fi
          done
          HASH_VALUE=$(cat "${HASH_FILES[@]}" | sha256sum | cut -d' ' -f1)
          echo "hashes-value=$HASH_VALUE" >> $GITHUB_OUTPUT
          echo -e "${COLOR_SUCCESS}${ICON_SUCCESS} 缓存哈希值: $HASH_VALUE${COLOR_RESET}"

      - name: 🔍 提取设备列表
        id: get-devices
        run: |
          CHIPSET='ipq60xx'
          COLOR_SUCCESS='\033[1;32m'
          ICON_SUCCESS='✅'

          set -euo pipefail
          DEVICES=$(grep -oE 'CONFIG_TARGET_DEVICE_.*_DEVICE_(.*)=y' "configs/base_${CHIPSET}.config" | sed -E 's/CONFIG_TARGET_DEVICE_.*_DEVICE_(.*)=y/\1/' | tr '\n' ' ')
          echo "devices=$DEVICES" >> $GITHUB_OUTPUT
          echo -e "${COLOR_SUCCESS}${ICON_SUCCESS} 发现设备: $DEVICES${COLOR_RESET}"
          
      - name: 🔍 获取内核版本
        id: get-kernel
        run: |
          CHIPSET='ipq60xx'
          COLOR_SUCCESS='\033[1;32m'
          ICON_SUCCESS='✅'

          set -euo pipefail
          git clone --depth=1 https://github.com/immortalwrt/immortalwrt
          cd immortalwrt
          echo "CONFIG_TARGET_${CHIPSET}=y" > .config
          KERNEL_VERSION=$(make kernelconfig | grep -oP 'CONFIG_KERNEL_\K[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          echo "kernel-version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo -e "${COLOR_SUCCESS}${ICON_SUCCESS} 内核版本: $KERNEL_VERSION${COLOR_RESET}"

  build-firmware:
    name: 🏗️ 构建 ${{ matrix.profile }} 配置
    needs: setup
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        profile: [Pro, Max, Ultra]
    uses: ./.github/workflows/reusable_builder.yml
    with:
      os_version: ${{ inputs.os_version || 'ubuntu-22.04' }}
      # 硬编码传递参数
      chipset: 'ipq60xx'
      branch: 'immwrt'
      profile: ${{ matrix.profile }}
      hashes-value: ${{ needs.setup.outputs.hashes-value }}
      devices: ${{ needs.setup.outputs.devices }}
    secrets: inherit

  release:
    name: 🚀 发布 Release
    if: always() && needs.setup.result == 'success'
    needs: [setup, build-firmware]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      releases: write
    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: 📥 下载所有产物
        uses: actions/download-artifact@v4
        with:
          path: all_artifacts
          merge-multiple: true

      - name: 📦 打包最终产物
        run: |
          # 硬编码变量
          CHIPSET='ipq60xx'
          set -euo pipefail
          mkdir -p release_assets
          tar -czvf release_assets/${CHIPSET}-config.tar.gz -C all_artifacts config/
          tar -czvf release_assets/${CHIPSET}-app.tar.gz -C all_artifacts packages/
          tar -czvf release_assets/${CHIPSET}-log.tar.gz -C all_artifacts logs/
          cp -r all_artifacts/firmware/* release_assets/ || true
          
          tar -tzf release_assets/${CHIPSET}-app.tar.gz | grep luci-app | sed 's/.*\///' | sort | uniq > release_assets/luci_apps_list.txt

      - name: 🚀 发布到 GitHub Release
        if: needs.build-firmware.result == 'success'
        uses: softprops/action-gh-release@v2
        with:
          # 硬编码 tag_name 和 body 中的变量
          tag_name: ipq60xx-${{ github.run_number }}-${{ github.sha }}
          body: |
            ## 🎉 ImmortalWrt ipq60xx 固件发布
            - **作者**: Mary
            - **发布时间**: ${{ github.event.head_commit.timestamp }}
            - **源码分支**: immortalwrt
            - **编译配置**: Pro, Max, Ultra
            - **内核版本**: ${{ needs.setup.outputs.kernel-version }}
            
            ---
            
            ## 📋 固件信息
            - **默认管理地址**: 192.168.111.1
            - **默认用户**: root
            - **默认密码**: 无 (直接回车)
            - **默认WIFI密码**: 12345678
            
            ---
            
            ## 📦 包含的 LuCI 应用列表
            $(cat release_assets/luci_apps_list.txt)
            
            ---
            
            ## ⬇️ 下载说明
            请根据您的设备型号和所需配置下载对应的固件文件。
            - `immwrt-<设备名>-<factory/sysupgrade>-<Pro/Max/Ultra>.bin` 是固件文件。
            - `ipq60xx-config.tar.gz` 包含所有配置、清单和构建信息。
            - `ipq60xx-app.tar.gz` 包含所有编译出的软件包。
            - `ipq60xx-log.tar.gz` 包含本次编译的详细日志。

          files: |
            release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
