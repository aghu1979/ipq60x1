name: OpenWrt Build Scheduler

on:
  workflow_dispatch:
    inputs:
      config:
        description: '选择配置文件'
        required: true
        default: 'libwrt'
        type: choice
        options:
        - libwrt
      ssh:
        description: 'SSH连接到Actions'
        required: false
        default: 'false'
        type: boolean
  push:
    branches:
      - main
    paths:
      - '.github/workflows/main.yml'
      - 'scripts/**'
      - 'config/**'
  schedule:
    - cron: '0 2 * * 1' # 每周一凌晨2点自动构建

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: scripts/diy.sh
  DIY_P2_SH: scripts/config-manager.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  PRODUCT_NAME: OpenWrt

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      build-time: ${{ steps.set-matrix.outputs.build-time }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 生成构建矩阵
        id: set-matrix
        run: |
          # 设置构建时间
          echo "build-time=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_OUTPUT
          
          # 生成构建矩阵
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # 定时构建使用所有配置
            echo 'matrix={"chip": ["ipq60xx"], "branch": ["main"], "config": ["libwrt"]}' >> $GITHUB_OUTPUT
          else
            # 手动触发使用选择的配置
            echo 'matrix={"chip": ["ipq60xx"], "branch": ["main"], "config": ["${{ github.event.inputs.config || 'libwrt' }}"]}' >> $GITHUB_OUTPUT
          fi

  build-base:
    needs: generate-matrix
    if: needs.generate-matrix.result == 'success'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    uses: ./.github/workflows/base-build.yml
    with:
      config: ${{ matrix.config }}
      ssh: ${{ github.event.inputs.ssh || 'false' }}
    secrets: inherit

  build-final:
    needs: [generate-matrix, build-base]
    if: always() && needs.generate-matrix.result == 'success' && needs.build-base.result == 'success'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    uses: ./.github/workflows/final-build.yml
    with:
      config: ${{ matrix.config }}
      ssh: ${{ github.event.inputs.ssh || 'false' }}
      base-cache-key: ${{ needs.build-base.outputs[matrix.branch].cache-key }}
    secrets: inherit

  release:
    needs: [generate-matrix, build-final]
    runs-on: ubuntu-latest
    if: always() && needs.build-final.result == 'success'
    steps:
      - name: 📥 下载所有产物
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ github.run_id }}-*"
          merge-multiple: true
          path: artifacts

      - name: 📦 整理发布文件
        run: |
          mkdir -p release
          # 复制所有固件文件
          find artifacts -name "*.bin" -type f -exec cp {} release/ \;
          # 复制配置文件
          find artifacts -name "*.config" -type f -exec cp {} release/ \;
          find artifacts -name "*.manifest" -type f -exec cp {} release/ \;
          find artifacts -name "config.buildinfo" -type f -exec cp {} release/ \;
          # 合并所有软件包
          mkdir -p packages
          find artifacts -name "*.ipk" -type f -exec cp {} packages/ \;
          tar -czf release/packages.tar.gz -C packages .
          # 复制报告文件
          find artifacts -name "*.md" -type f -exec cp {} release/ \;
          # 生成文件列表
          ls -la release/ > release/filelist.txt

      - name: 🚀 发布到Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.run_number }}
          name: OpenWrt Build ${{ github.run_number }}
          body: |
            ## 📅 编译信息
            - **编译时间**: ${{ needs.generate-matrix.outputs.build-time }}
            - **编译任务**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ## 📦 产物说明
            - `*.bin`: 固件文件
            - `*.config`: 编译配置
            - `*.manifest`: 软件包清单
            - `config.buildinfo`: 构建信息
            - `packages.tar.gz`: 所有软件包
            - `*.md`: 详细报告
            
            ## 🔗 快速访问
            - [查看构建日志](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [下载所有产物](${{ github.server_url }}/${{ github.repository }}/releases/download/build-${{ github.run_number }}/)
          files: release/*
          draft: false
          prerelease: false
