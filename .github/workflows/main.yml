name: OpenWrt Build Scheduler

on:
  schedule:
    - cron: '0 16 * * 4'  # 北京时间周五0点 (UTC+8)
  workflow_dispatch:  # 仅保留手动触发

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      build-time: ${{ steps.time.outputs.time }}
      chip: ${{ steps.set-matrix.outputs.chip }}
      branch: ${{ steps.set-matrix.outputs.branch }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 生成编译矩阵
        id: set-matrix
        run: |
          # 检查可用的配置文件
          echo "📋 检查配置文件..."
          ls -la configs/
          
          # 获取可用的芯片配置
          CHIPS=$(ls configs/base_*.config | sed 's|configs/base_||' | sed 's|.config||' | tr '\n' ' ')
          echo "可用芯片: $CHIPS"
          
          # 获取可用的分支配置
          BRANCHES=$(ls configs/base_*.config | sed 's|configs/base_||' | sed 's|.config||' | tr '\n' ' ')
          echo "可用分支: $BRANCHES"
          
          # 获取可用的用户配置
          CONFIGS=$(ls configs/[Pp]ro.config configs/[Mm]ax.config configs/[Uu]ltra.config 2>/dev/null | sed 's|configs/||' | sed 's|.config||' | tr '\n' ' ')
          echo "可用配置: $CONFIGS"
          
          # 生成矩阵
          matrix=$(jq -n -c \
            --argjson chips '["ipq60xx"]' \
            --argjson branches '["openwrt", "immwrt", "libwrt"]' \
            --argjson configs '["Pro", "Max", "Ultra"]' \
            '{
              chip: $chips[0],
              branch: $branches,
              config: $configs,
              include: [
                $branches[] as $branch | $configs[] as $config | {chip: $chips[0], branch, config}
              ]
            }')
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "chip=${{ matrix.chip }}" >> $GITHUB_OUTPUT
          echo "branch=${{ matrix.branch }}" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

      - name: ⏰ 记录编译时间
        id: time
        run: |
          echo "time=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

  # Job 1: 编译基础系统
  build-base:
    needs: generate-matrix
    uses: ./.github/workflows/base-build.yml
    with:
      chip: ${{ needs.generate-matrix.outputs.chip }}
      branch: ${{ needs.generate-matrix.outputs.branch }}
    secrets: inherit

  # Job 2: 并行编译最终固件
  build-final:
    needs: [generate-matrix, build-base]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    uses: ./.github/workflows/final-build.yml
    with:
      chip: ${{ matrix.chip }}
      branch: ${{ matrix.branch }}
      config: ${{ matrix.config }}
      base-cache-key: ${{ needs.build-base.outputs.cache-key }}
    secrets: inherit

  release:
    needs: [generate-matrix, build-final]
    runs-on: ubuntu-latest
    if: always() && needs.build-final.result == 'success'
    steps:
      - name: 📥 下载所有产物
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ github.run_id }}-*"
          merge-multiple: true
          path: artifacts

      - name: 📦 整理发布文件
        run: |
          mkdir -p release
          # 复制所有固件文件
          find artifacts -name "*.bin" -type f -exec cp {} release/ \;
          # 复制配置文件
          find artifacts -name "*.config" -type f -exec cp {} release/ \;
          find artifacts -name "*.manifest" -type f -exec cp {} release/ \;
          find artifacts -name "config.buildinfo" -type f -exec cp {} release/ \;
          # 合并所有软件包
          mkdir -p packages
          find artifacts -name "*.ipk" -type f -exec cp {} packages/ \;
          tar -czf release/packages.tar.gz -C packages .
          # 复制报告文件
          find artifacts -name "*.md" -type f -exec cp {} release/ \;
          # 生成文件列表
          ls -la release/ > release/filelist.txt

      - name: 🚀 发布到Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.run_number }}
          name: OpenWrt Build ${{ github.run_number }}
          body: |
            ## 📅 编译信息
            - **编译时间**: ${{ needs.generate-matrix.outputs.build-time }}
            - **编译任务**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ## 📦 产物说明
            - `*.bin`: 固件文件
            - `*.config`: 编译配置
            - `*.manifest`: 软件包清单
            - `config.buildinfo`: 构建信息
            - `packages.tar.gz`: 所有软件包
            - `*.md`: 详细报告
            
            ## 🔗 快速访问
            - [查看构建日志](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [下载所有产物](${{ github.server_url }}/${{ github.repository }}/releases/download/build-${{ github.run_number }}/)
          files: release/*
          draft: false
          prerelease: false
