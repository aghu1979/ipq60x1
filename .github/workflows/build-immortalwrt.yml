name: IPQ60xx-ImmortalWrt-MultiBuild

on:
  workflow_dispatch:
  workflow_call:
  # schedule:
  #   - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/laipeng668/immortalwrt.git
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: scripts/diy.sh
  DIY_P2_SH: scripts/repo.sh
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  TZ: Asia/Shanghai
  # 定义三个变体
  VARIANTS: "Ultra Max Pro"
  # 基础配置文件
  BASE_CONFIG: configs/base_ipq60xx.config
  IMMWRT_CONFIG: configs/base_immwrt.config

jobs:
  Setup:
    runs-on: ubuntu-22.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      build-date: ${{ steps.build-date.outputs.date }}
      file-date: ${{ steps.build-date.outputs.file-date }}
      version-info: ${{ steps.version-info.outputs.info }}
      version-kernel: ${{ steps.version-info.outputs.kernel }}
      source-repo: ${{ steps.clone-source.outputs.source-repo }}
      device-target: ${{ steps.generate-vars.outputs.device-target }}
      device-subtarget: ${{ steps.generate-vars.outputs.device-subtarget }}
      hash: ${{ steps.clone-source.outputs.hash }}

    steps:
    - name: 检查服务器性能
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo timedatectl set-timezone "$TZ"

    - name: 检出代码
      uses: actions/checkout@main

    - name: 克隆源代码并生成基础变量
      id: clone-source
      run: |
        df -hT $GITHUB_WORKSPACE
        sudo mkdir -p /mnt/openwrt
        sudo chown -R $(id -u):$(id -g) /mnt/openwrt
        git clone --depth 1 -b $REPO_BRANCH --single-branch $REPO_URL /mnt/openwrt
        cd /mnt/openwrt
        
        # 输出版本信息
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12 2>/dev/null || echo "N/A")
        echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV
        
        # 输出基础变量
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "source-repo=$SOURCE_REPO" >> $GITHUB_OUTPUT
        echo "hash=$(git log -1 --pretty=format:'%h')" >> $GITHUB_OUTPUT

    - name: 生成设备变量
      id: generate-vars
      run: |
        # 使用Ultra配置生成基础变量
        cat $BASE_CONFIG $IMMWRT_CONFIG configs/Ultra.config > /tmp/merged.config
        cd /mnt/openwrt
        cp /tmp/merged.config .config
        make defconfig > /dev/null 2>&1
        
        # 输出设备变量
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "device-target=$DEVICE_TARGET" >> $GITHUB_OUTPUT
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "device-subtarget=$DEVICE_SUBTARGET" >> $GITHUB_OUTPUT

    - name: 设置构建日期
      id: build-date
      run: |
        echo "date=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_OUTPUT
        echo "file-date=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT

    - name: 设置版本信息
      id: version-info
      run: |
        echo "info=$VERSION_INFO" >> $GITHUB_OUTPUT
        echo "kernel=$VERSION_KERNEL" >> $GITHUB_OUTPUT

    - name: 生成缓存键
      id: cache-key
      run: |
        echo "key=${{ steps.clone-source.outputs.source-repo }}-${{ env.REPO_BRANCH }}-${{ steps.generate-vars.outputs.device-target }}-${{ steps.generate-vars.outputs.device-subtarget }}-${{ steps.clone-source.outputs.hash }}-${{ steps.build-date.outputs.date }}" >> $GITHUB_OUTPUT

    - name: 缓存工具链
      uses: actions/cache@main
      with:
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: ${{ steps.clone-source.outputs.source-repo }}-${{ env.REPO_BRANCH }}-${{ steps.generate-vars.outputs.device-target }}-${{ steps.generate-vars.outputs.device-subtarget }}-
        path: |
          /mnt/openwrt/.ccache
          /mnt/openwrt/staging_dir
          /mnt/openwrt/dl

    - name: 刷新缓存
      run: |
        if [ -d "/mnt/openwrt/staging_dir" ]; then
          find "/mnt/openwrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
              find "$dir" -type f -exec touch {} +
          done
        fi

  Build:
    needs: Setup
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        variant: [Ultra, Max, Pro]
      fail-fast: false
    
    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 初始化日志
      run: |
        cd $GITHUB_WORKSPACE
        source scripts/logger.sh
        init_log
        log_system_status

    - name: 准备构建环境
      run: |
        # 修复：切换到工作目录并加载日志函数
        cd $GITHUB_WORKSPACE
        source scripts/logger.sh
        
        # 创建构建目录
        BUILD_DIR="/mnt/openwrt-${{ matrix.variant }}"
        sudo mkdir -p $BUILD_DIR
        sudo chown -R $(id -u):$(id -g) $BUILD_DIR
        
        # 关键修复：在Build作业中重新克隆源代码
        log_info "为 ${{ matrix.variant }} 变体克隆源代码到 $BUILD_DIR"
        git clone --depth 1 -b $REPO_BRANCH --single-branch $REPO_URL $BUILD_DIR
        
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        echo "OPENWRT_PATH=$BUILD_DIR" >> $GITHUB_ENV

    - name: 检查并恢复缓存
      run: |
        # 修复：切换到工作目录并加载所有需要的函数库
        cd $GITHUB_WORKSPACE
        source scripts/logger.sh
        source scripts/utils.sh
        
        # 检查缓存是否有效
        if is_cache_valid "/mnt/openwrt/dl" 3; then
          echo "CACHE_VALID=true" >> $GITHUB_ENV
          log_info "DL缓存有效，将恢复缓存"
          
          # 恢复缓存内容
          log_info "恢复 .ccache 缓存"
          sudo mkdir -p $OPENWRT_PATH/.ccache
          sudo cp -al /mnt/openwrt/.ccache/. $OPENWRT_PATH/.ccache/ || true
          
          log_info "恢复 staging_dir 缓存"
          sudo mkdir -p $OPENWRT_PATH/staging_dir
          sudo cp -al /mnt/openwrt/staging_dir/. $OPENWRT_PATH/staging_dir/ || true
          
          log_info "恢复 dl 缓存"
          sudo mkdir -p $OPENWRT_PATH/dl
          sudo cp -al /mnt/openwrt/dl/. $OPENWRT_PATH/dl/ || true
          
          # 修正所有权
          sudo chown -R $(id -u):$(id -g) $OPENWRT_PATH
          
        else
          echo "CACHE_VALID=false" >> $GITHUB_ENV
          log_info "缓存无效，将进行完整构建"
        fi

    - name: 合并配置文件
      run: |
        # 修复：切换到工作目录并加载所有需要的函数库
        cd $GITHUB_WORKSPACE
        source scripts/logger.sh
        source scripts/utils.sh
        
        # 合并配置文件
        MERGED_CONFIG="/tmp/${{ matrix.variant }}.config"
        merge_configs "$BASE_CONFIG" "$IMMWRT_CONFIG" "configs/${{ matrix.variant }}.config" "$MERGED_CONFIG"
        
        # 复制到构建目录
        cp "$MERGED_CONFIG" "$OPENWRT_PATH/.config"
        
        log_info "配置文件合并完成: ${{ matrix.variant }}"

    - name: 诊断软件包配置
      id: diagnose
      run: |
        # 修复：切换到工作目录并加载日志函数
        cd $GITHUB_WORKSPACE
        source scripts/logger.sh
        
        # 创建输出目录
        OUTPUT_DIR="$GITHUB_WORKSPACE/package-diagnostic-${{ matrix.variant }}"
        mkdir -p "$OUTPUT_DIR"
        
        # 诊断软件包配置
        chmod +x scripts/compare_packages.sh
        if scripts/compare_packages.sh "$OPENWRT_PATH/.config" "$OPENWRT_PATH" "${{ matrix.variant }}" "$OUTPUT_DIR"; then
          echo "diagnosis=success" >> $GITHUB_OUTPUT
          log_info "软件包配置诊断成功"
        else
          echo "diagnosis=failed" >> $GITHUB_OUTPUT
          log_error "软件包配置诊断失败"
          
          # 生成错误摘要
          echo ""
          echo "================================================================================"
          echo "❌ 编译终止：软件包配置存在问题"
          echo "================================================================================"
          echo "📋 请查看以下文件了解详情："
          echo "   - 缺失的软件包列表: ${OUTPUT_DIR}/${{ matrix.variant }}_missing_packages.txt"
          echo "   - 完整诊断报告: ${OUTPUT_DIR}/${{ matrix.variant }}_diagnostic_report.html"
          echo ""
          echo "🔧 修复建议："
          echo "   1. 检查 configs/${{ matrix.variant }}.config 文件中的软件包名称"
          echo "   2. 确认软件包适用于IPQ60xx架构"
          echo "   3. 检查软件包的依赖关系"
          echo "   4. 更新feeds配置"
          echo ""
          echo "💡 提示：诊断报告已上传为构建附件，可在GitHub Actions页面下载查看"
          echo "================================================================================"
          echo ""
          
          exit 1
        fi
        
        # 上传诊断结果
        echo "DIAGNOSTIC_DIR=$OUTPUT_DIR" >> $GITHUB_ENV

    - name: 上传诊断报告
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: diagnostic-report-${{ matrix.variant }}
        path: ${{ env.DIAGNOSTIC_DIR }}
        retention-days: 30

    - name: 安装Feeds
      run: |
        # 修复：切换到工作目录并加载日志函数
        cd $GITHUB_WORKSPACE
        source scripts/logger.sh
        
        cd $OPENWRT_PATH
        
        # 如果缓存无效，更新feeds
        if [ "$CACHE_VALID" != "true" ]; then
          log_command "./scripts/feeds update -a" "更新feeds"
          log_command "./scripts/feeds install -a" "安装feeds"
        else
          log_info "使用缓存的feeds"
        fi

    - name: 加载自定义配置
      run: |
        # 修复：切换到工作目录并加载日志函数
        cd $GITHUB_WORKSPACE
        source scripts/logger.sh
        
        chmod +x $DIY_P1_SH
        chmod +x $DIY_P2_SH
        
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_P1_SH "$OPENWRT_PATH"
        $GITHUB_WORKSPACE/$DIY_P2_SH "$OPENWRT_PATH"

    - name: 下载DL软件包
      run: |
        # 修复：切换到工作目录并加载日志函数
        cd $GITHUB_WORKSPACE
        source scripts/logger.sh
        
        cd $OPENWRT_PATH
        log_command "make defconfig" "执行defconfig"
        
        # 如果缓存无效，下载软件包
        if [ "$CACHE_VALID" != "true" ]; then
          log_command "make download -j$(nproc)" "下载软件包"
        else
          log_info "使用缓存的软件包"
        fi

    - name: 编译固件
      id: compile
      run: |
        # 修复：切换到工作目录并加载日志函数
        cd $GITHUB_WORKSPACE
        source scripts/logger.sh
        
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread compile"
        
        # 记录编译开始时间
        BUILD_START=$(date +%s)
        echo "BUILD_START=$BUILD_START" >> $GITHUB_ENV
        
        # 编译固件
        if log_command "make -j$(nproc) || make -j1 || make -j1 V=s" "编译固件"; then
          echo "status=success" >> $GITHUB_OUTPUT
          log_info "编译成功"
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          log_error "编译失败"
          exit 1
        fi
        
        # 记录编译结束时间
        BUILD_END=$(date +%s)
        BUILD_TIME=$((BUILD_END - BUILD_START))
        echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
        log_info "编译耗时: $BUILD_TIME 秒"

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 整理文件
      if: steps.compile.outputs.status == 'success'
      run: |
        # 修复：切换到工作目录并加载日志函数
        cd $GITHUB_WORKSPACE
        source scripts/logger.sh
        
        cd $OPENWRT_PATH/bin/targets/*/*
        
        # 复制配置文件
        cp $OPENWRT_PATH/.config ${{ matrix.variant }}.config
        
        # 重命名文件
        mv config.buildinfo ${{ matrix.variant }}.config.buildinfo
        mv immortalwrt-qualcommax-ipq60xx.manifest immortalwrt-qualcommax-ipq60xx-${{ matrix.variant }}.manifest
        
        # 整理软件包
        mkdir -p packages
        mv -f $OPENWRT_PATH/bin/packages/*/*/*.apk packages 2>/dev/null || true
        tar -zcf ${{ matrix.variant }}.Packages.tar.gz packages
        
        # 清理不需要的文件
        rm -rf packages feeds.buildinfo version.buildinfo sha256sums profiles.json
        
        # 设置输出路径
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        
        log_info "文件整理完成"

    - name: 上传固件到Artifact
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ needs.Setup.outputs.source-repo }}-firmware-${{ matrix.variant }}-${{ needs.Setup.outputs.device-target }}-${{ needs.Setup.outputs.device-subtarget }}-${{ needs.Setup.outputs.file-date }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: 上传固件到Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@main
      with:
        name: ${{ needs.Setup.outputs.build-date }} for ${{ matrix.variant }}
        allowUpdates: true
        tag: ${{ matrix.variant }}-${{ needs.Setup.outputs.file-date }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is ImmortalWrt Firmware for ${{ matrix.variant }} variant**
          ### 📒 固件信息
          - 这是 ${{ matrix.variant }} 变体的固件，包含以下特性：
            - Ultra: 包含最多第三方luci软件包
            - Max: 包含中等数量第三方luci软件包
            - Pro: 包含最少第三方luci软件包
          - 💻 这是 IPQ60xx 平台使用的 ImmortalWrt 固件
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🌐 默认地址: **192.168.111.1**
          - 🔑 默认密码: none
          - ⏱️ 编译耗时: ${{ env.BUILD_TIME }} 秒
          ### 🧊 固件版本
          - 固件内核版本：**${{ needs.Setup.outputs.version-kernel }}**
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ needs.Setup.outputs.version-info }}

  Cleanup:
    needs: [Setup, Build]
    runs-on: ubuntu-22.04
    if: always()
    
    steps:
    - name: 删除旧缓存
      run: |
        # 获取缓存列表并删除
        gh cache list --key ${{ needs.Setup.outputs.source-repo }}-${{ env.REPO_BRANCH }}-${{ needs.Setup.outputs.device-target }}-${{ needs.Setup.outputs.device-subtarget }}- --json key --jq '.[] | .key' | while read -r key; do
          gh cache delete "$key"
        done
        # 输出缓存状态
        echo "========cache status========"
        echo "ccache: $(du -sh /mnt/openwrt/.ccache 2>/dev/null | cut -f 1 || echo "N/A")"
        echo "staging: $(du -sh /mnt/openwrt/staging_dir 2>/dev/null | cut -f 1 || echo "N/A")"
        echo "dl: $(du -sh /mnt/openwrt/dl 2>/dev/null | cut -f 1 || echo "N/A")"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
