name: OpenWrt Base System Build

on:
  workflow_call:
    inputs:
      chip:
        required: true
        type: string
      branch:
        required: true
        type: string

jobs:
  build-base:
    runs-on: ubuntu-22.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      build-path: ${{ steps.cache-key.outputs.path }}
    steps:
      - name: 🛠️ 初始化环境
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 检查目录结构
        run: |
          echo "📌 当前工作目录: $(pwd)"
          echo "📌 根目录内容:"
          ls -la
          echo ""
          echo "📌 检查.github目录:"
          ls -la .github/ 2>/dev/null || echo "❌ .github目录不存在"
          echo ""
          echo "📌 查找configs目录:"
          find . -name "configs" -type d 2>/dev/null
          echo ""
          echo "📌 查找scripts目录:"
          find . -name "scripts" -type d 2>/dev/null
          echo ""
          echo "📌 查找base配置文件:"
          find . -name "base_*.config" -type f 2>/dev/null
          echo ""
          echo "📋 输入参数:"
          echo "  - chip: '${{ inputs.chip }}'"
          echo "  - branch: '${{ inputs.branch }}'"

      - name: 🔑 生成缓存键
        id: cache-key
        run: |
          echo "📋 开始生成缓存键..."
          echo "  - chip: '${{ inputs.chip }}'"
          echo "  - branch: '${{ inputs.branch }}'"
          
          # 检查配置文件是否存在
          CHIP_CONFIG_FILE="base_${{ inputs.chip }}.config"
          BRANCH_CONFIG_FILE="base_${{ inputs.branch }}.config"
          
          echo "📋 查找配置文件:"
          echo "  - 芯片配置文件: $CHIP_CONFIG_FILE"
          echo "  - 分支配置文件: $BRANCH_CONFIG_FILE"
          
          # 查找芯片配置文件
          if [ -f "configs/$CHIP_CONFIG_FILE" ]; then
            CHIP_CONFIG="configs/$CHIP_CONFIG_FILE"
            echo "  ✅ 找到芯片配置: $CHIP_CONFIG"
          elif [ -f ".github/configs/$CHIP_CONFIG_FILE" ]; then
            CHIP_CONFIG=".github/configs/$CHIP_CONFIG_FILE"
            echo "  ✅ 找到芯片配置: $CHIP_CONFIG"
          else
            echo "  ❌ 找不到芯片配置文件: $CHIP_CONFIG_FILE"
            echo "📋 可用的芯片配置文件:"
            find . -name "base_*.config" -type f 2>/dev/null | sed 's/^/    /'
            exit 1
          fi
          
          # 查找分支配置文件
          if [ -f "configs/$BRANCH_CONFIG_FILE" ]; then
            BRANCH_CONFIG="configs/$BRANCH_CONFIG_FILE"
            echo "  ✅ 找到分支配置: $BRANCH_CONFIG"
          elif [ -f ".github/configs/$BRANCH_CONFIG_FILE" ]; then
            BRANCH_CONFIG=".github/configs/$BRANCH_CONFIG_FILE"
            echo "  ✅ 找到分支配置: $BRANCH_CONFIG"
          else
            echo "  ❌ 找不到分支配置文件: $BRANCH_CONFIG_FILE"
            echo "📋 可用的分支配置文件:"
            find . -name "base_*.config" -type f 2>/dev/null | grep "base_openwrt\|base_immwrt\|base_libwrt" | sed 's/^/    /'
            exit 1
          fi
          
          # 生成基于配置的缓存键
          CHIP_HASH=$(sha256sum "$CHIP_CONFIG" | cut -d' ' -f1)
          BRANCH_HASH=$(sha256sum "$BRANCH_CONFIG" | cut -d' ' -f1)
          CACHE_KEY="base-${{ inputs.chip }}-${{ inputs.branch }}-${CHIP_HASH:0:8}-${BRANCH_HASH:0:8}"
          BUILD_PATH="build-base-${{ inputs.chip }}-${{ inputs.branch }}"
          
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "path=$BUILD_PATH" >> $GITHUB_OUTPUT
          echo "chip-config=$CHIP_CONFIG" >> $GITHUB_OUTPUT
          echo "branch-config=$BRANCH_CONFIG" >> $GITHUB_OUTPUT
          echo "✅ 缓存键生成完成: $CACHE_KEY"

      - name: 📦 恢复基础环境缓存
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-key.outputs.path }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            base-${{ inputs.chip }}-${{ inputs.branch }}-

      - name: 🌱 准备基础环境
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "🔧 准备基础编译环境..."
          echo "📌 当前工作目录: $(pwd)"
          echo "📌 芯片: ${{ inputs.chip }}"
          echo "📌 分支: ${{ inputs.branch }}"
          echo "📌 芯片配置文件: ${{ steps.cache-key.outputs.chip-config }}"
          echo "📌 分支配置文件: ${{ steps.cache-key.outputs.branch-config }}"
          
          # 创建构建目录
          mkdir -p ${{ steps.cache-key.outputs.path }}
          
          # 设置源码仓库URL和分支 - 使用正确的仓库地址
          case "${{ inputs.branch }}" in
            "openwrt")
              REPO_URL="https://github.com/laipeng668/openwrt.git"
              REPO_BRANCH="master"
              ;;
            "immwrt")
              REPO_URL="https://github.com/laipeng668/immortalwrt.git"
              REPO_BRANCH="master"
              ;;
            "libwrt")
              REPO_URL="https://github.com/laipeng668/openwrt-6.x.git"
              REPO_BRANCH="k6.12-nss"
              ;;
            *)
              echo "❌ 不支持的分支: ${{ inputs.branch }}"
              echo "💡 支持的分支: openwrt, immwrt, libwrt"
              exit 1
              ;;
          esac
          
          echo "🔽 克隆源码: $REPO_URL"
          echo "📋 使用分支: $REPO_BRANCH"
          
          # 克隆指定分支
          git clone --depth=1 -b $REPO_BRANCH $REPO_URL openwrt-src
          
          # 进入源码目录
          cd openwrt-src
          echo "📌 进入源码目录: $(pwd)"
          echo "📌 当前分支:"
          git branch
          echo "📌 上级目录内容:"
          ls -la ../
          
          # 修正配置文件路径（相对于openwrt-src目录）
          CHIP_CONFIG_REL="../${{ steps.cache-key.outputs.chip-config }}"
          BRANCH_CONFIG_REL="../${{ steps.cache-key.outputs.branch-config }}"
          
          echo "📋 相对路径:"
          echo "  - 芯片配置: $CHIP_CONFIG_REL"
          echo "  - 分支配置: $BRANCH_CONFIG_REL"
          
          # 检查文件是否存在
          if [ ! -f "$CHIP_CONFIG_REL" ]; then
            echo "❌ 芯片配置文件不存在: $CHIP_CONFIG_REL"
            echo "📋 上级目录中的configs内容:"
            ls -la ../configs/ 2>/dev/null || echo "configs目录不存在"
            echo "📋 上级目录中的.github/configs内容:"
            ls -la ../.github/configs/ 2>/dev/null || echo ".github/configs目录不存在"
            exit 1
          fi
          
          if [ ! -f "$BRANCH_CONFIG_REL" ]; then
            echo "❌ 分支配置文件不存在: $BRANCH_CONFIG_REL"
            exit 1
          fi
          
          # 保存芯片配置（用于对比）
          echo "📋 保存芯片配置..."
          cp "$CHIP_CONFIG_REL" .config.chip
          echo "✅ 已保存芯片配置"
          
          # 应用芯片配置
          cp "$CHIP_CONFIG_REL" .config
          echo "✅ 已应用芯片配置"
          
          # 保存分支配置（用于对比）
          cp "$BRANCH_CONFIG_REL" .config.branch
          echo "✅ 已保存分支配置"
          
          # 追加分支配置
          cat "$BRANCH_CONFIG_REL" >> .config
          echo "✅ 已应用分支配置"
          
          # 第一次 make defconfig - 补全基础配置的依赖
          echo ""
          echo "🔧 第一次 make defconfig - 补全基础配置依赖..."
          make defconfig
          echo "📋 基础配置项数: $(grep -c '^CONFIG_' .config)"
          
          # 第一次LUCI软件包检查
          echo ""
          echo "🔍 ==================== 第一次LUCI软件包检查 ===================="
          LUCI_PACKAGES=$(grep "^CONFIG_PACKAGE_luci-" .config | sed 's/^CONFIG_PACKAGE_\(.*\)=y/\1/' | sort)
          if [ -n "$LUCI_PACKAGES" ]; then
            echo "📦 基础配置中的LUCI软件包:"
            echo "$LUCI_PACKAGES"
            
            # 检查软件包可用性
            MISSING_PACKAGES=""
            for pkg in $LUCI_PACKAGES; do
              if [ ! -d "package/feeds/packages/$pkg" ] && [ ! -d "package/feeds/luci/$pkg" ] && [ ! -d "package/$pkg" ]; then
                MISSING_PACKAGES="$MISSING_PACKAGES $pkg"
              fi
            done
            
            if [ -n "$MISSING_PACKAGES" ]; then
              echo "⚠️ 发现缺失的LUCI软件包:$MISSING_PACKAGES"
              echo "💡 这些软件包可能在feeds更新后可用"
            else
              echo "✅ 所有基础LUCI软件包都可用"
            fi
          else
            echo "ℹ️ 基础配置中没有LUCI软件包"
          fi
          
          # 查找并复制脚本文件
          if [ -d "../scripts" ]; then
            SCRIPT_DIR="../scripts"
          elif [ -d "../.github/scripts" ]; then
            SCRIPT_DIR="../.github/scripts"
          else
            echo "❌ 找不到scripts目录"
            echo "📋 上级目录内容:"
            ls -la ../
            exit 1
          fi
          
          echo "📋 使用脚本目录: $SCRIPT_DIR"
          cp "$SCRIPT_DIR/diy.sh" ./
          cp "$SCRIPT_DIR/repo.sh" ./
          cp "$SCRIPT_DIR/compare-packages.sh" ./
          chmod +x diy.sh repo.sh compare-packages.sh
          
          # 第一阶段：对比芯片配置和合并后的配置
          echo ""
          echo "🔍 ==================== 基础系统配置对比 ===================="
          echo "对比: 芯片配置 → (芯片配置 + 分支配置)"
          ./compare-packages.sh .config.chip .config "基础系统"
          
          # 执行初始化脚本
          echo ""
          echo "🔧 执行系统初始化..."
          ./diy.sh
          
          echo "📦 添加第三方软件源..."
          ./repo.sh
          
          # 更新feeds
          echo "🔄 更新软件包索引..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # 第二次 make defconfig - 补全feeds更新后的配置
          echo ""
          echo "🔧 第二次 make defconfig - 补全feeds更新后的配置..."
          make defconfig
          echo "📋 feeds更新后配置项数: $(grep -c '^CONFIG_' .config)"
          
          # 第二次LUCI软件包检查和自动修复
          echo ""
          echo "🔍 ==================== 第二次LUCI软件包检查 ===================="
          LUCI_PACKAGES=$(grep "^CONFIG_PACKAGE_luci-" .config | sed 's/^CONFIG_PACKAGE_\(.*\)=y/\1/' | sort)
          TOTAL_PACKAGES=$(echo "$LUCI_PACKAGES" | wc -l)
          echo "📦 需要的LUCI软件包总数: $TOTAL_PACKAGES"
          
          if [ $TOTAL_PACKAGES -gt 0 ]; then
            # 创建检查报告
            printf '# 基础系统LUCI软件包检查报告\n\n**检查时间**: %s\n**配置**: %s-%s\n**总软件包数**: %d\n\n## 📦 软件包可用性检查\n\n| 软件包 | 状态 | 位置 | 备注 |\n|--------|------|------|------|\n' \
              "$(date)" "${{ inputs.chip }}" "${{ inputs.branch }}" "$TOTAL_PACKAGES" > luci-packages-基础系统.md
            
            MISSING_COUNT=0
            FOUND_COUNT=0
            MISSING_PACKAGES=""
            
            for pkg in $LUCI_PACKAGES; do
              if [ -d "package/feeds/packages/$pkg" ]; then
                echo "✅ $pkg - 可用 (packages)"
                printf '| %s | ✅ 可用 | packages | - |\n' "$pkg" >> luci-packages-基础系统.md
                ((FOUND_COUNT++))
              elif [ -d "package/feeds/luci/$pkg" ]; then
                echo "✅ $pkg - 可用 (luci)"
                printf '| %s | ✅ 可用 | luci | - |\n' "$pkg" >> luci-packages-基础系统.md
                ((FOUND_COUNT++))
              elif [ -d "package/$pkg" ]; then
                echo "✅ $pkg - 可用 (local)"
                printf '| %s | ✅ 可用 | local | - |\n' "$pkg" >> luci-packages-基础系统.md
                ((FOUND_COUNT++))
              else
                echo "❌ $pkg - 缺失"
                printf '| %s | ❌ 缺失 | - | 需要修复 |\n' "$pkg" >> luci-packages-基础系统.md
                ((MISSING_COUNT++))
                MISSING_PACKAGES="$MISSING_PACKAGES $pkg"
              fi
            done
            
            # 添加统计信息
            printf '\n## 📊 统计信息\n\n- 总软件包数: %d\n- 找到软件包: %d\n- 缺失软件包: %d\n- 成功率: %d%%\n' \
              "$TOTAL_PACKAGES" "$FOUND_COUNT" "$MISSING_COUNT" "$(( FOUND_COUNT * 100 / TOTAL_PACKAGES ))" >> luci-packages-基础系统.md
            
            if [ $MISSING_COUNT -gt 0 ]; then
              echo ""
              echo "🚨 发现 $MISSING_COUNT 个缺失的LUCI软件包！"
              echo "📦 缺失列表:$MISSING_PACKAGES"
              echo ""
              echo "🔧 尝试自动修复..."
              
              # 尝试自动修复
              REPAIRED_COUNT=0
              for pkg in $MISSING_PACKAGES; do
                echo "🔍 修复软件包: $pkg"
                
                # 尝试查找相似的软件包名
                SIMILAR=$(find package/feeds -name "*$(echo $pkg | tr '-' '\n' | head -1)*" -type d 2>/dev/null | head -5)
                if [ -n "$SIMILAR" ]; then
                  echo "  💡 找到相似的软件包:"
                  echo "$SIMILAR" | sed 's/^/    /'
                fi
                
                # 尝试重新安装feeds
                echo "  🔄 尝试重新安装feeds..."
                if ./scripts/feeds install $pkg 2>/dev/null; then
                  echo "  ✅ 成功安装: $pkg"
                  ((REPAIRED_COUNT++))
                else
                  echo "  ❌ 无法安装: $pkg"
                  
                  # 尝试查找软件包定义
                  PKG_FOUND=$(find . -name "Makefile" -exec grep -l "Package/$pkg" {} \; 2>/dev/null | head -3)
                  if [ -n "$PKG_FOUND" ]; then
                    echo "  📄 软件包定义位置:"
                    echo "$PKG_FOUND" | sed 's/^/    /'
                  fi
                fi
              done
              
              # 第三次 make defconfig - 修复后更新配置
              if [ $REPAIRED_COUNT -gt 0 ]; then
                echo ""
                echo "🔧 第三次 make defconfig - 修复后更新配置..."
                make defconfig
                
                # 最终检查
                echo ""
                echo "🔍 ==================== 最终LUCI软件包检查 ===================="
                FINAL_MISSING_COUNT=0
                for pkg in $MISSING_PACKAGES; do
                  if [ -d "package/feeds/packages/$pkg" ] || [ -d "package/feeds/luci/$pkg" ] || [ -d "package/$pkg" ]; then
                    echo "✅ $pkg - 已修复"
                  else
                    echo "❌ $pkg - 仍然缺失"
                    ((FINAL_MISSING_COUNT++))
                  fi
                done
                
                # 更新报告
                printf '\n## 🔧 自动修复结果\n\n- 尝试修复: %d\n- 成功修复: %d\n- 仍然缺失: %d\n' \
                  "$MISSING_COUNT" "$REPAIRED_COUNT" "$FINAL_MISSING_COUNT" >> luci-packages-基础系统.md
                
                if [ $FINAL_MISSING_COUNT -gt 0 ]; then
                  echo ""
                  echo "❌ 仍有 $FINAL_MISSING_COUNT 个软件包无法修复"
                  echo "🚨 基础系统编译将停止，请检查软件包名称或源码"
                  exit 1
                else
                  echo ""
                  echo "✅ 所有LUCI软件包已成功修复！"
                fi
              else
                echo ""
                echo "❌ 自动修复失败，无法修复任何软件包"
                echo "🚨 基础系统编译将停止"
                exit 1
              fi
            else
              echo ""
              echo "✅ 所有 $TOTAL_PACKAGES 个LUCI软件包检查通过！"
            fi
          else
            echo "ℹ️ 基础配置中没有LUCI软件包"
            printf '# 基础系统LUCI软件包检查报告\n\n**检查时间**: %s\n**配置**: %s-%s\n\nℹ️ 基础配置中没有LUCI软件包\n' \
              "$(date)" "${{ inputs.chip }}" "${{ inputs.branch }}" > luci-packages-基础系统.md
          fi
          
          # 准备编译环境
          echo "🔨 准备编译工具链..."
          make -j$(nproc) IGNORE_ERRORS=1 download
          make -j$(nproc) IGNORE_ERRORS=1 tools/compile
          make -j$(nproc) IGNORE_ERRORS=1 toolchain/compile
          
          # 保存对比报告到当前目录
          if [ -f "luci-packages-基础系统.md" ]; then
            cp luci-packages-基础系统.md ../luci-packages-基础系统-${{ inputs.branch }}.md
            echo "✅ 已保存对比报告: luci-packages-基础系统-${{ inputs.branch }}.md"
          else
            echo "⚠️ 对比报告未生成"
          fi
          
          # 返回上级目录
          cd ..
          
          # 打包基础环境
          echo "📦 打包基础环境..."
          tar -czf ${{ steps.cache-key.outputs.path }}/base.tar.gz -C openwrt-src .
          echo "✅ 基础环境准备完成"

      - name: 📤 上传基础系统报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: base-report-${{ inputs.branch }}-${{ github.run_id }}
          path: |
            luci-packages-基础系统-${{ inputs.branch }}.md
          retention-days: 7
          if-no-files-found: warn
