name: OpenWrt Base System Build

on:
  workflow_call:
    inputs:
      chip:
        required: true
        type: string
      branch:
        required: true
        type: string
    outputs:
      cache-key: ${{ jobs.build-base.outputs.cache-key }}
      build-path: ${{ jobs.build-base.outputs.build-path }}

jobs:
  build-base:
    runs-on: ubuntu-22.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      build-path: ${{ steps.cache-key.outputs.path }}
    steps:
      - name: 🛠️ 初始化环境
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔑 生成缓存键
        id: cache-key
        run: |
          # 生成基于配置的缓存键
          CHIP_HASH=$(sha256sum configs/base_${{ inputs.chip }}.config | cut -d' ' -f1)
          BRANCH_HASH=$(sha256sum configs/base_${{ inputs.branch }}.config | cut -d' ' -f1)
          CACHE_KEY="base-${{ inputs.chip }}-${{ inputs.branch }}-${CHIP_HASH:0:8}-${BRANCH_HASH:0:8}"
          BUILD_PATH="build-base-${{ inputs.chip }}-${{ inputs.branch }}"
          
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "path=$BUILD_PATH" >> $GITHUB_OUTPUT
          echo "Generated cache key: $CACHE_KEY"

      - name: 📦 恢复基础环境缓存
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-key.outputs.path }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            base-${{ inputs.chip }}-${{ inputs.branch }}-

      - name: 🌱 准备基础环境
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "🔧 准备基础编译环境..."
          echo "📌 当前工作目录: $(pwd)"
          echo "📌 配置文件目录内容:"
          ls -la configs/
          echo "📌 脚本目录内容:"
          ls -la scripts/
          
          # 创建构建目录
          mkdir -p ${{ steps.cache-key.outputs.path }}
          
          # 设置源码仓库URL
          case "${{ inputs.branch }}" in
            "openwrt")
              REPO_URL="https://github.com/openwrt/openwrt"
              ;;
            "immwrt")
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              ;;
            "libwrt")
              REPO_URL="https://github.com/LibreWrt/LibreWrt"
              ;;
            *)
              echo "❌ 不支持的分支: ${{ inputs.branch }}"
              exit 1
              ;;
          esac
          
          # 克隆源码
          echo "🔽 克隆源码: $REPO_URL"
          git clone --depth=1 $REPO_URL openwrt-src
          
          # 进入源码目录
          cd openwrt-src
          echo "📌 进入源码目录: $(pwd)"
          
          # 保存芯片配置（用于对比）
          echo "📋 保存芯片配置..."
          if [ -f "../configs/base_${{ inputs.chip }}.config" ]; then
            cp "../configs/base_${{ inputs.chip }}.config" .config.chip
            echo "✅ 已保存芯片配置"
          else
            echo "❌ 找不到芯片配置文件: configs/base_${{ inputs.chip }}.config"
            exit 1
          fi
          
          # 应用芯片配置
          cp "../configs/base_${{ inputs.chip }}.config" .config
          echo "✅ 已应用芯片配置: configs/base_${{ inputs.chip }}.config"
          
          # 保存分支配置（用于对比）
          if [ -f "../configs/base_${{ inputs.branch }}.config" ]; then
            cp "../configs/base_${{ inputs.branch }}.config" .config.branch
            echo "✅ 已保存分支配置"
          else
            echo "❌ 找不到分支配置文件: configs/base_${{ inputs.branch }}.config"
            exit 1
          fi
          
          # 追加分支配置
          cat "../configs/base_${{ inputs.branch }}.config" >> .config
          echo "✅ 已应用分支配置: configs/base_${{ inputs.branch }}.config"
          
          # 复制脚本文件
          cp ../scripts/diy.sh ./
          cp ../scripts/repo.sh ./
          cp ../scripts/compare-packages.sh ./
          chmod +x diy.sh repo.sh compare-packages.sh
          
          # 第一阶段：对比芯片配置和合并后的配置
          echo ""
          echo "🔍 ==================== 基础系统配置对比 ===================="
          echo "对比: 芯片配置 → (芯片配置 + 分支配置)"
          ./compare-packages.sh .config.chip .config "基础系统"
          
          # 执行初始化脚本
          echo ""
          echo "🔧 执行系统初始化..."
          ./diy.sh
          
          echo "📦 添加第三方软件源..."
          ./repo.sh
          
          # 更新feeds
          echo "🔄 更新软件包索引..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # 准备编译环境
          echo "🔨 准备编译工具链..."
          make defconfig
          make -j$(nproc) IGNORE_ERRORS=1 download
          make -j$(nproc) IGNORE_ERRORS=1 tools/compile
          make -j$(nproc) IGNORE_ERRORS=1 toolchain/compile
          
          # 保存对比报告
          cp luci-packages-基础系统.md ../
          
          # 返回上级目录
          cd ..
          
          # 打包基础环境
          echo "📦 打包基础环境..."
          tar -czf ${{ steps.cache-key.outputs.path }}/base.tar.gz -C openwrt-src .
          echo "✅ 基础环境准备完成"

      - name: 📤 上传基础系统报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: base-report-${{ github.run_id }}
          path: |
            luci-packages-基础系统.md
          retention-days: 7
