name: Build Core System

on:
  workflow_dispatch:
    inputs:
      build_all:
        description: '是否编译所有组合'
        required: true
        default: true
        type: boolean
      chip:
        description: '芯片型号（当build_all为false时生效）'
        required: false
        default: 'ipq60xx'
        type: choice
        options:
          - ipq60xx
          # - ipq80xx  # 暂时注释，保留扩展空间
      branch:
        description: '源码分支（当build_all为false时生效）'
        required: false
        default: 'openwrt'
        type: choice
        options:
          - openwrt
          - immwrt
          - libwrt
  schedule:
    - cron: '0 2 * * 1'  # 每周一凌晨2点自动编译

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 生成编译矩阵
        id: set-matrix
        run: |
          if [ "${{ inputs.build_all }}" = "true" ]; then
            # 编译所有组合（暂时只包含ipq60xx）
            matrix=$(jq -n -c \
              --argjson chips '["ipq60xx"]' \
              # --argjson chips '["ipq60xx", "ipq80xx"]'  # 未来扩展时取消注释
              --argjson branches '["openwrt", "immwrt", "libwrt"]' \
              '{
                include: [
                  $chips[] as $chip | $branches[] as $branch | {chip, branch}
                ]
              }')
            echo "📋 将编译所有芯片和分支组合"
          else
            # 只编译指定组合
            matrix=$(jq -n -c \
              --arg chip "${{ inputs.chip }}" \
              --arg branch "${{ inputs.branch }}" \
              '{
                include: [
                  {chip: $chip, branch: $branch}
                ]
              }')
            echo "📋 将编译指定组合: ${{ inputs.chip }}-${{ inputs.branch }}"
          fi
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

  build-core:
    needs: generate-matrix
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔧 设置环境
        id: setup
        run: |
          # 安装依赖
          sudo apt-get update
          sudo apt-get install -y jq curl build-essential
          
          # 设置变量
          CHIP="${{ matrix.chip }}"
          BRANCH="${{ matrix.branch }}"
          BUILD_PATH="core-build-${CHIP}-${BRANCH}"
          
          # 生成缓存键
          CHIP_HASH=$(sha256sum "configs/base_${CHIP}.config" | cut -d' ' -f1)
          BRANCH_HASH=$(sha256sum "configs/base_${BRANCH}.config" | cut -d' ' -f1)
          CACHE_KEY="core-${CHIP}-${BRANCH}-${CHIP_HASH:0:8}-${BRANCH_HASH:0:8}"
          
          # 输出变量
          echo "build-path=$BUILD_PATH" >> $GITHUB_OUTPUT
          echo "cache-key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "chip=$CHIP" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          
          echo "✅ 环境设置完成"
          echo "  - 芯片: $CHIP"
          echo "  - 分支: $BRANCH"
          echo "  - 构建路径: $BUILD_PATH"
          echo "  - 缓存键: $CACHE_KEY"

      - name: 📦 检查缓存
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.setup.outputs.build-path }}
          key: ${{ steps.setup.outputs.cache-key }}
          restore-keys: |
            core-${{ matrix.chip }}-${{ matrix.branch }}-

      - name: 🌱 编译核心系统
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          # 执行核心编译脚本
          chmod +x scripts/build-core.sh
          ./scripts/build-core.sh \
            --chip "${{ steps.setup.outputs.chip }}" \
            --branch "${{ steps.setup.outputs.branch }}" \
            --path "${{ steps.setup.outputs.build-path }}"

      - name: 📤 上传核心系统
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: core-${{ matrix.chip }}-${{ matrix.branch }}-${{ github.run_id }}
          path: ${{ steps.setup.outputs.build-path }}
          retention-days: 7

  # 生成所有核心系统的映射文件
  generate-core-map:
    needs: [generate-matrix, build-core]
    runs-on: ubuntu-latest
    if: always() && needs.build-core.result == 'success'
    steps:
      - name: 📝 生成核心系统映射文件
        run: |
          # 创建映射文件（暂时只包含ipq60xx）
          cat > core-map.json << EOF
          {
            "ipq60xx-openwrt": "core-ipq60xx-openwrt-${{ github.run_id }}",
            "ipq60xx-immwrt": "core-ipq60xx-immwrt-${{ github.run_id }}",
            "ipq60xx-libwrt": "core-ipq60xx-libwrt-${{ github.run_id }}",
            # "ipq80xx-openwrt": "core-ipq80xx-openwrt-${{ github.run_id }}",  # 未来扩展时取消注释
            # "ipq80xx-immwrt": "core-ipq80xx-immwrt-${{ github.run_id }}",   # 未来扩展时取消注释
            # "ipq80xx-libwrt": "core-ipq80xx-libwrt-${{ github.run_id }}"    # 未来扩展时取消注释
          }
          EOF
          
          echo "📋 核心系统映射文件:"
          cat core-map.json

      - name: 📤 上传映射文件
        uses: actions/upload-artifact@v4
        with:
          name: core-map-${{ github.run_id }}
          path: core-map.json
          retention-days: 1

  # 自动触发所有软件包编译
  trigger-packages:
    needs: [generate-matrix, build-core, generate-core-map]
    runs-on: ubuntu-latest
    if: always() && needs.build-core.result == 'success' && needs.generate-core-map.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        package: [Pro, Max, Ultra]
    steps:
      - name: 🚀 触发软件包编译
        run: |
          echo "📋 将为所有核心系统编译 ${{ matrix.package }} 软件包"
          # 这里只是展示信息，实际的软件包编译需要手动触发或通过其他方式
