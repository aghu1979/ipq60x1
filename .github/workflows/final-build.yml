name: OpenWrt Final Build

on:
  workflow_call:
    inputs:
      chip:
        required: true
        type: string
      branch:
        required: true
        type: string
      config:
        required: true
        type: string
      base-cache-key:
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: false

jobs:
  build-firmware:
    runs-on: ubuntu-22.04
    outputs:
      build-status: ${{ steps.build.outputs.status }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔍 检查目录结构
        run: |
          echo "📌 当前工作目录: $(pwd)"
          echo "📌 根目录内容:"
          ls -la
          echo ""
          echo "📌 查找configs目录:"
          find . -name "configs" -type d 2>/dev/null
          echo ""
          echo "📌 查找scripts目录:"
          find . -name "scripts" -type d 2>/dev/null
          echo ""
          echo "📋 输入参数:"
          echo "  - chip: '${{ inputs.chip }}'"
          echo "  - branch: '${{ inputs.branch }}'"
          echo "  - config: '${{ inputs.config }}'"
          echo "  - base-cache-key: '${{ inputs.base-cache-key }}'"

      - name: 📦 恢复基础环境
        run: |
          echo "📦 恢复基础环境..."
          echo "📌 当前工作目录: $(pwd)"
          echo "📌 基础缓存键: '${{ inputs.base-cache-key }}'"
          
          # 检查缓存键是否为空
          if [ -z "${{ inputs.base-cache-key }}" ]; then
            echo "❌ 基础缓存键为空"
            echo "📋 查找所有缓存目录:"
            find . -name "build-base-*" -type d 2>/dev/null
            exit 1
          fi
          
          # 从缓存键中提取构建路径
          BUILD_PATH=$(echo "${{ inputs.base-cache-key }}" | sed 's/base-//' | sed 's/-[^-]*$//' | sed 's/-[^-]*$//')
          BUILD_PATH="build-base-$BUILD_PATH"
          echo "📌 推断的构建路径: $BUILD_PATH"
          
          # 创建构建目录
          mkdir -p openwrt-build
          
          # 解压基础环境
          if [ -f "$BUILD_PATH/base.tar.gz" ]; then
            tar -xzf "$BUILD_PATH/base.tar.gz" -C openwrt-build
            echo "✅ 基础环境恢复完成"
          else
            echo "❌ 找不到基础环境缓存文件"
            echo "📋 查找所有缓存目录:"
            find . -name "build-base-*" -type d 2>/dev/null
            echo "📋 查找所有base.tar.gz文件:"
            find . -name "base.tar.gz" -type f 2>/dev/null
            exit 1
          fi

      - name: 🔧 合并配置文件
        run: |
          echo "🔧 合并配置文件..."
          cd openwrt-build
          
          # 备份原始配置（用于对比）
          cp .config .config.base
          echo "📋 原始配置项数: $(grep -c '^CONFIG_' .config.base)"
          
          # 查找用户配置文件
          if [ -f "../configs/${{ inputs.config }}.config" ]; then
            USER_CONFIG="../configs/${{ inputs.config }}.config"
          elif [ -f "../.github/configs/${{ inputs.config }}.config" ]; then
            USER_CONFIG="../.github/configs/${{ inputs.config }}.config"
          else
            echo "❌ 找不到用户配置文件: ${{ inputs.config }}.config"
            echo "📋 查找所有配置文件:"
            find .. -name "*.config" -type f 2>/dev/null
            exit 1
          fi
          
          echo "📋 应用用户配置: $USER_CONFIG"
          echo "📋 用户配置项数: $(grep -c '^CONFIG_' "$USER_CONFIG")"
          
          # 保存用户配置
          cp "$USER_CONFIG" .config.user
          
          # 合并配置
          while IFS= read -r line; do
            if [[ $line =~ ^CONFIG_ ]]; then
              key=$(echo "$line" | cut -d'=' -f1)
              if grep -q "^$key=" .config; then
                sed -i "s|^$key=.*|$line|" .config
              else
                echo "$line" >> .config
              fi
            fi
          done < "$USER_CONFIG"
          
          echo "✅ 用户配置合并完成"
          
          # 第一次 make defconfig - 补全用户配置的依赖
          echo ""
          echo "🔧 第一次 make defconfig - 补全用户配置依赖..."
          make defconfig
          echo "📋 合并用户配置后项数: $(grep -c '^CONFIG_' .config)"
          
          # 第一次LUCI软件包检查
          echo ""
          echo "🔍 ==================== 用户配置LUCI软件包检查 ===================="
          USER_LUCI=$(grep "^CONFIG_PACKAGE_luci-" .config.user | sed 's/^CONFIG_PACKAGE_\(.*\)=y/\1/' | sort)
          if [ -n "$USER_LUCI" ]; then
            echo "📦 用户配置中的LUCI软件包:"
            echo "$USER_LUCI"
            
            # 检查软件包可用性
            MISSING_USER=""
            for pkg in $USER_LUCI; do
              if [ ! -d "package/feeds/packages/$pkg" ] && [ ! -d "package/feeds/luci/$pkg" ] && [ ! -d "package/$pkg" ]; then
                MISSING_USER="$MISSING_USER $pkg"
              fi
            done
            
            if [ -n "$MISSING_USER" ]; then
              echo "⚠️ 用户配置中发现缺失的LUCI软件包:$MISSING_USER"
            else
              echo "✅ 用户配置中的所有LUCI软件包都可用"
            fi
          else
            echo "ℹ️ 用户配置中没有LUCI软件包"
          fi
          
          # 查找并复制对比脚本
          if [ -f "../scripts/compare-packages.sh" ]; then
            cp ../scripts/compare-packages.sh ./
          elif [ -f "../.github/scripts/compare-packages.sh" ]; then
            cp ../.github/scripts/compare-packages.sh ./
          else
            echo "❌ 找不到compare-packages.sh脚本"
            exit 1
          fi
          chmod +x compare-packages.sh
          
          # 第二阶段：对比基础配置和最终配置
          echo ""
          echo "🔍 ==================== 最终配置对比 ===================="
          echo "对比: 基础配置 → (基础配置 + ${{ inputs.config }}配置)"
          ./compare-packages.sh .config.base .config "最终配置-${{ inputs.config }}"
          
          # 第二次 make defconfig - 确保最终配置完整
          echo ""
          echo "🔧 第二次 make defconfig - 确保最终配置完整..."
          make defconfig
          echo "📋 最终配置项数: $(grep -c '^CONFIG_' .config)"

      - name: 🔍 检查LUCI软件包
        run: |
          echo "🔍 最终LUCI软件包检查..."
          cd openwrt-build
          
          # 提取所有LUCI软件包
          LUCI_PACKAGES=$(grep "^CONFIG_PACKAGE_luci-" .config | sed 's/^CONFIG_PACKAGE_\(.*\)=y/\1/' | sort)
          TOTAL_PACKAGES=$(echo "$LUCI_PACKAGES" | wc -l)
          echo "📦 最终需要的LUCI软件包总数: $TOTAL_PACKAGES"
          
          # 创建检查报告 - 使用printf避免heredoc问题
          printf '# 最终LUCI软件包检查报告 - %s\n\n**检查时间**: %s\n**配置**: %s-%s-%s\n**总软件包数**: %d\n\n## 📦 软件包可用性检查\n\n| 软件包 | 状态 | 位置 | 备注 |\n|--------|------|------|------|\n' \
            "${{ inputs.config }}" \
            "$(date)" \
            "${{ inputs.chip }}" "${{ inputs.branch }}" "${{ inputs.config }}" \
            "$TOTAL_PACKAGES" > luci-final-check-${{ inputs.config }}.md
          
          # 检查软件包可用性
          MISSING_COUNT=0
          FOUND_COUNT=0
          MISSING_PACKAGES=""
          
          for pkg in $LUCI_PACKAGES; do
            if [ -d "package/feeds/packages/$pkg" ]; then
              echo "✅ $pkg - 可用 (packages)"
              printf '| %s | ✅ 可用 | packages | - |\n' "$pkg" >> luci-final-check-${{ inputs.config }}.md
              ((FOUND_COUNT++))
            elif [ -d "package/feeds/luci/$pkg" ]; then
              echo "✅ $pkg - 可用 (luci)"
              printf '| %s | ✅ 可用 | luci | - |\n' "$pkg" >> luci-final-check-${{ inputs.config }}.md
              ((FOUND_COUNT++))
            elif [ -d "package/$pkg" ]; then
              echo "✅ $pkg - 可用 (local)"
              printf '| %s | ✅ 可用 | local | - |\n' "$pkg" >> luci-final-check-${{ inputs.config }}.md
              ((FOUND_COUNT++))
            else
              echo "❌ $pkg - 缺失"
              printf '| %s | ❌ 缺失 | - | 需要修复 |\n' "$pkg" >> luci-final-check-${{ inputs.config }}.md
              ((MISSING_COUNT++))
              MISSING_PACKAGES="$MISSING_PACKAGES $pkg"
            fi
          done
          
          # 添加统计信息
          printf '\n## 📊 统计信息\n\n- 总软件包数: %d\n- 找到软件包: %d\n- 缺失软件包: %d\n- 成功率: %d%%\n' \
            "$TOTAL_PACKAGES" "$FOUND_COUNT" "$MISSING_COUNT" "$(( FOUND_COUNT * 100 / TOTAL_PACKAGES ))" >> luci-final-check-${{ inputs.config }}.md
          
          if [ $MISSING_COUNT -gt 0 ]; then
            echo ""
            echo "🚨 发现 $MISSING_COUNT 个缺失的LUCI软件包！"
            echo "📦 缺失列表:$MISSING_PACKAGES"
            echo ""
            echo "🔧 尝试自动修复..."
            
            # 尝试自动修复
            REPAIRED_COUNT=0
            for pkg in $MISSING_PACKAGES; do
              echo "🔍 修复软件包: $pkg"
              
              # 尝试查找相似的软件包名
              SIMILAR=$(find package/feeds -name "*$(echo $pkg | tr '-' '\n' | head -1)*" -type d 2>/dev/null | head -5)
              if [ -n "$SIMILAR" ]; then
                echo "  💡 找到相似的软件包:"
                echo "$SIMILAR" | sed 's/^/    /'
              fi
              
              # 尝试重新安装feeds
              echo "  🔄 尝试重新安装feeds..."
              if ./scripts/feeds install $pkg 2>/dev/null; then
                echo "  ✅ 成功安装: $pkg"
                ((REPAIRED_COUNT++))
              else
                echo "  ❌ 无法安装: $pkg"
                
                # 尝试查找软件包定义
                PKG_FOUND=$(find . -name "Makefile" -exec grep -l "Package/$pkg" {} \; 2>/dev/null | head -3)
                if [ -n "$PKG_FOUND" ]; then
                  echo "  📄 软件包定义位置:"
                  echo "$PKG_FOUND" | sed 's/^/    /'
                fi
              fi
            done
            
            # 第三次 make defconfig - 修复后更新配置
            if [ $REPAIRED_COUNT -gt 0 ]; then
              echo ""
              echo "🔧 第三次 make defconfig - 修复后更新配置..."
              make defconfig
              
              # 最终检查
              echo ""
              echo "🔍 ==================== 最终LUCI软件包修复检查 ===================="
              FINAL_MISSING_COUNT=0
              for pkg in $MISSING_PACKAGES; do
                if [ -d "package/feeds/packages/$pkg" ] || [ -d "package/feeds/luci/$pkg" ] || [ -d "package/$pkg" ]; then
                  echo "✅ $pkg - 已修复"
                else
                  echo "❌ $pkg - 仍然缺失"
                  ((FINAL_MISSING_COUNT++))
                fi
              done
              
              # 更新报告
              printf '\n## 🔧 自动修复结果\n\n- 尝试修复: %d\n- 成功修复: %d\n- 仍然缺失: %d\n' \
                "$MISSING_COUNT" "$REPAIRED_COUNT" "$FINAL_MISSING_COUNT" >> luci-final-check-${{ inputs.config }}.md
              
              if [ $FINAL_MISSING_COUNT -gt 0 ]; then
                echo ""
                echo "❌ 仍有 $FINAL_MISSING_COUNT 个软件包无法修复"
                echo "🚨 最终编译将停止，请检查软件包名称或源码"
                
                # 列出仍然缺失的软件包
                echo ""
                echo "📋 仍然缺失的软件包:"
                for pkg in $MISSING_PACKAGES; do
                  if [ ! -d "package/feeds/packages/$pkg" ] && [ ! -d "package/feeds/luci/$pkg" ] && [ ! -d "package/$pkg" ]; then
                    echo "  - $pkg"
                  fi
                done
                
                exit 1
              else
                echo ""
                echo "✅ 所有LUCI软件包已成功修复！"
              fi
            else
              echo ""
              echo "❌ 自动修复失败，无法修复任何软件包"
              echo "🚨 最终编译将停止"
              exit 1
            fi
          else
            echo ""
            echo "✅ 所有 $TOTAL_PACKAGES 个LUCI软件包检查通过！"
          fi
          
          # 输出报告
          echo ""
          echo "📄 最终检查报告:"
          cat luci-final-check-${{ inputs.config }}.md

      - name: 🚀 编译固件
        id: build
        run: |
          echo "🚀 开始编译固件..."
          cd openwrt-build
          
          # 设置编译参数
          echo "🔨 使用 $(nproc) 个核心并行编译"
          
          # 尝试并行编译
          if ! make -j$(nproc) IGNORE_ERRORS=1; then
            echo "⚠️ 并行编译失败，尝试单线程编译..."
            make -j1 V=s
          fi
          
          # 检查编译结果
          if [ -d "bin/targets" ] && [ "$(ls -A bin/targets)" ]; then
            echo "✅ 编译成功"
            echo "📦 生成的固件文件:"
            find bin/targets -name "*.bin" -type f -exec ls -lh {} \;
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ 编译失败，未找到固件文件"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📦 收集编译产物
        run: |
          echo "📦 收集编译产物..."
          mkdir -p artifacts
          
          # 复制固件文件
          echo "📂 收集固件文件..."
          find openwrt-build/bin/targets -name "*.bin" -type f -exec cp {} artifacts/ \;
          
          # 复制配置文件
          echo "📂 收集配置文件..."
          cp openwrt-build/.config artifacts/config-${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}.config
          find openwrt-build/bin/targets -name "*.manifest" -type f -exec cp {} artifacts/ \;
          find openwrt-build/bin/targets -name "config.buildinfo" -type f -exec cp {} artifacts/ \;
          
          # 复制软件包
          echo "📂 收集软件包..."
          mkdir -p artifacts/packages
          find openwrt-build/bin/packages -name "*.ipk" -type f -exec cp {} artifacts/packages/ \;
          
          # 复制所有报告
          echo "📂 收集报告文件..."
          cp openwrt-build/luci-*.md artifacts/ 2>/dev/null || true
          cp luci-*.md artifacts/ 2>/dev/null || true
          
          # 生成文件清单
          echo "📋 生成文件清单..."
          ls -la artifacts/ > artifacts/filelist.txt
          echo "✅ 产物收集完成"
          echo "📊 产物统计:"
          echo "  - 固件文件: $(find artifacts -name '*.bin' | wc -l)"
          echo "  - 软件包: $(find artifacts/packages -name '*.ipk' | wc -l)"
          echo "  - 配置文件: $(find artifacts -name '*.config' | wc -l)"
          echo "  - 报告文件: $(find artifacts -name '*.md' | wc -l)"

      - name: 📤 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}-${{ github.run_id }}
          path: artifacts/
          retention-days: 7
          if-no-files-found: error
