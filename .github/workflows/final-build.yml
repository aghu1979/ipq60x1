name: OpenWrt Final Build

on:
  workflow_call:
    inputs:
      chip:
        required: true
        type: string
      branch:
        required: true
        type: string
      config:
        required: true
        type: string
      base-cache-key:
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: false

jobs:
  build-firmware:
    runs-on: ubuntu-22.04
    outputs:
      build-status: ${{ steps.build.outputs.status }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 恢复基础环境
        run: |
          echo "📦 恢复基础环境..."
          echo "📌 当前工作目录: $(pwd)"
          echo "📌 基础缓存键: ${{ inputs.base-cache-key }}"
          
          # 创建构建目录
          mkdir -p openwrt-build
          
          # 解压基础环境
          if [ -f "build-base-${{ inputs.chip }}-${{ inputs.branch }}/base.tar.gz" ]; then
            tar -xzf "build-base-${{ inputs.chip }}-${{ inputs.branch }}/base.tar.gz" -C openwrt-build
            echo "✅ 基础环境恢复完成"
          else
            echo "❌ 找不到基础环境缓存文件"
            exit 1
          fi

      - name: 🔧 合并配置文件
        run: |
          echo "🔧 合并配置文件..."
          cd openwrt-build
          
          # 备份原始配置（用于对比）
          cp .config .config.base
          echo "📋 原始配置项数: $(grep -c '^CONFIG_' .config.base)"
          
          # 检查用户配置文件
          USER_CONFIG="../configs/${{ inputs.config }}.config"
          if [ -f "$USER_CONFIG" ]; then
            echo "📋 应用用户配置: $USER_CONFIG"
            echo "📋 用户配置项数: $(grep -c '^CONFIG_' "$USER_CONFIG")"
            
            # 保存用户配置
            cp "$USER_CONFIG" .config.user
            
            # 合并配置
            while IFS= read -r line; do
              if [[ $line =~ ^CONFIG_ ]]; then
                key=$(echo "$line" | cut -d'=' -f1)
                if grep -q "^$key=" .config; then
                  sed -i "s|^$key=.*|$line|" .config
                else
                  echo "$line" >> .config
                fi
              fi
            done < "$USER_CONFIG"
            
            echo "✅ 用户配置合并完成"
          else
            echo "⚠️ 用户配置文件不存在: $USER_CONFIG"
            touch .config.user  # 创建空文件避免错误
          fi
          
          # 复制对比脚本
          cp ../scripts/compare-packages.sh ./
          chmod +x compare-packages.sh
          
          # 第二阶段：对比基础配置和最终配置
          echo ""
          echo "🔍 ==================== 最终配置对比 ===================="
          echo "对比: 基础配置 → (基础配置 + ${{ inputs.config }}配置)"
          ./compare-packages.sh .config.base .config "最终配置-${{ inputs.config }}"
          
          # 生成最终配置
          make defconfig
          echo "📋 最终配置项数: $(grep -c '^CONFIG_' .config)"

      - name: 🔍 检查LUCI软件包
        run: |
          echo "🔍 最终LUCI软件包检查..."
          cd openwrt-build
          
          # 提取所有LUCI软件包
          LUCI_PACKAGES=$(grep "^CONFIG_PACKAGE_luci-" .config | sed 's/^CONFIG_PACKAGE_\(.*\)=y/\1/' | sort)
          TOTAL_PACKAGES=$(echo "$LUCI_PACKAGES" | wc -l)
          echo "📦 最终需要的LUCI软件包总数: $TOTAL_PACKAGES"
          
          # 创建检查报告
          cat > luci-final-check-${{ inputs.config }}.md << EOF
# 最终LUCI软件包检查报告 - ${{ inputs.config }}

**检查时间**: $(date)  
**配置**: ${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}  
**总软件包数**: $TOTAL_PACKAGES  

## 📦 软件包可用性检查

| 软件包 | 状态 | 位置 | 备注 |
|--------|------|------|------|
EOF
          
          # 检查软件包可用性
          MISSING_COUNT=0
          FOUND_COUNT=0
          for pkg in $LUCI_PACKAGES; do
            if [ -d "package/feeds/packages/$pkg" ]; then
              echo "✅ $pkg - 可用 (packages)"
              echo "| $pkg | ✅ 可用 | packages | - |" >> luci-final-check-${{ inputs.config }}.md
              ((FOUND_COUNT++))
            elif [ -d "package/feeds/luci/$pkg" ]; then
              echo "✅ $pkg - 可用 (luci)"
              echo "| $pkg | ✅ 可用 | luci | - |" >> luci-final-check-${{ inputs.config }}.md
              ((FOUND_COUNT++))
            elif [ -d "package/$pkg" ]; then
              echo "✅ $pkg - 可用 (local)"
              echo "| $pkg | ✅ 可用 | local | - |" >> luci-final-check-${{ inputs.config }}.md
              ((FOUND_COUNT++))
            else
              echo "❌ $pkg - 缺失"
              echo "| $pkg | ❌ 缺失 | - | 需要修复 |" >> luci-final-check-${{ inputs.config }}.md
              ((MISSING_COUNT++))
            fi
          done
          
          # 添加统计信息
          cat >> luci-final-check-${{ inputs.config }}.md << EOF

## 📊 统计信息

- 总软件包数: $TOTAL_PACKAGES
- 找到软件包: $FOUND_COUNT
- 缺失软件包: $MISSING_COUNT
- 成功率: $(( FOUND_COUNT * 100 / TOTAL_PACKAGES ))%
EOF
          
          # 输出报告
          echo ""
          echo "📄 最终检查报告:"
          cat luci-final-check-${{ inputs.config }}.md
          
          if [ $MISSING_COUNT -gt 0 ]; then
            echo ""
            echo "🚨 发现 $MISSING_COUNT 个缺失的LUCI软件包！"
            echo "💡 修复建议:"
            echo "1. 检查软件包名称是否正确"
            echo "2. 更新第三方软件源"
            echo "3. 确认软件包在当前分支中可用"
            echo "4. 检查软件包依赖关系"
            exit 1
          else
            echo ""
            echo "✅ 所有 $TOTAL_PACKAGES 个LUCI软件包检查通过！"
          fi

      - name: 🚀 编译固件
        id: build
        run: |
          echo "🚀 开始编译固件..."
          cd openwrt-build
          
          # 设置编译参数
          echo "🔨 使用 $(nproc) 个核心并行编译"
          
          # 尝试并行编译
          if ! make -j$(nproc) IGNORE_ERRORS=1; then
            echo "⚠️ 并行编译失败，尝试单线程编译..."
            make -j1 V=s
          fi
          
          # 检查编译结果
          if [ -d "bin/targets" ] && [ "$(ls -A bin/targets)" ]; then
            echo "✅ 编译成功"
            echo "📦 生成的固件文件:"
            find bin/targets -name "*.bin" -type f -exec ls -lh {} \;
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ 编译失败，未找到固件文件"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📦 收集编译产物
        run: |
          echo "📦 收集编译产物..."
          mkdir -p artifacts
          
          # 复制固件文件
          echo "📂 收集固件文件..."
          find openwrt-build/bin/targets -name "*.bin" -type f -exec cp {} artifacts/ \;
          
          # 复制配置文件
          echo "📂 收集配置文件..."
          cp openwrt-build/.config artifacts/config-${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}.config
          find openwrt-build/bin/targets -name "*.manifest" -type f -exec cp {} artifacts/ \;
          find openwrt-build/bin/targets -name "config.buildinfo" -type f -exec cp {} artifacts/ \;
          
          # 复制软件包
          echo "📂 收集软件包..."
          mkdir -p artifacts/packages
          find openwrt-build/bin/packages -name "*.ipk" -type f -exec cp {} artifacts/packages/ \;
          
          # 复制所有报告
          echo "📂 收集报告文件..."
          cp openwrt-build/luci-*.md artifacts/ 2>/dev/null || true
          cp luci-*.md artifacts/ 2>/dev/null || true
          
          # 生成文件清单
          echo "📋 生成文件清单..."
          ls -la artifacts/ > artifacts/filelist.txt
          echo "✅ 产物收集完成"
          echo "📊 产物统计:"
          echo "  - 固件文件: $(find artifacts -name '*.bin' | wc -l)"
          echo "  - 软件包: $(find artifacts/packages -name '*.ipk' | wc -l)"
          echo "  - 配置文件: $(find artifacts -name '*.config' | wc -l)"
          echo "  - 报告文件: $(find artifacts -name '*.md' | wc -l)"

      - name: 📤 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}-${{ github.run_id }}
          path: artifacts/
          retention-days: 7
          if-no-files-found: error
