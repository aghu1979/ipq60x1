name: OpenWrt Final Build

on:
  workflow_call:
    inputs:
      chip:
        required: true
        type: string
      branch:
        required: true
        type: string
      config:
        required: true
        type: string
      cache-map-name:
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: false

jobs:
  build-firmware:
    runs-on: ubuntu-22.04
    outputs:
      build-status: ${{ steps.build.outputs.status }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📥 下载缓存映射文件
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.cache-map-name }}
          path: ./

      - name: 🔍 检查目录结构
        run: |
          echo "📌 当前工作目录: $(pwd)"
          echo "📌 根目录内容:"
          ls -la
          echo ""
          echo "📌 查找configs目录:"
          find . -name "configs" -type d 2>/dev/null
          echo ""
          echo "📌 查找scripts目录:"
          find . -name "scripts" -type d 2>/dev/null
          echo ""
          echo "📋 输入参数:"
          echo "  - chip: '${{ inputs.chip }}'"
          echo "  - branch: '${{ inputs.branch }}'"
          echo "  - config: '${{ inputs.config }}'"
          echo "  - cache-map-name: '${{ inputs.cache-map-name }}'"
          echo ""
          echo "📋 缓存映射文件内容:"
          if [ -f "cache-map.json" ]; then
            cat cache-map.json
          else
            echo "❌ 缓存映射文件不存在"
          fi

      - name: 🔑 获取缓存键
        id: cache-key
        run: |
          # 从缓存映射文件中提取对应分支的缓存键
          if [ -f "cache-map.json" ]; then
            CACHE_KEY=$(jq -r ".${{ inputs.branch }}" cache-map.json)
            if [ "$CACHE_KEY" != "null" ] && [ -n "$CACHE_KEY" ]; then
              echo "cache-key=$CACHE_KEY" >> $GITHUB_OUTPUT
              echo "✅ 获取到缓存键: $CACHE_KEY"
            else
              echo "❌ 无法从缓存映射文件中获取分支 ${{ inputs.branch }} 的缓存键"
              exit 1
            fi
          else
            echo "❌ 缓存映射文件不存在"
            exit 1
          fi

      - name: 📦 恢复基础环境
        run: |
          echo "📦 恢复基础环境..."
          echo "📌 当前工作目录: $(pwd)"
          echo "📌 基础缓存键: '${{ steps.cache-key.outputs.cache-key }}'"
          
          # 检查缓存键是否为空
          if [ -z "${{ steps.cache-key.outputs.cache-key }}" ]; then
            echo "❌ 基础缓存键为空"
            exit 1
          fi
          
          # 从缓存键中提取构建路径
          BUILD_PATH=$(echo "${{ steps.cache-key.outputs.cache-key }}" | sed 's/base-//' | sed 's/-[^-]*$//' | sed 's/-[^-]*$//')
          BUILD_PATH="build-base-$BUILD_PATH"
          echo "📌 推断的构建路径: $BUILD_PATH"
          
          # 创建构建目录
          mkdir -p openwrt-build
          
          # 解压基础环境
          if [ -f "$BUILD_PATH/base.tar.gz" ]; then
            tar -xzf "$BUILD_PATH/base.tar.gz" -C openwrt-build
            echo "✅ 基础环境恢复完成"
          else
            echo "❌ 找不到基础环境缓存文件"
            echo "📋 查找所有缓存目录:"
            find . -name "build-base-*" -type d 2>/dev/null
            echo "📋 查找所有base.tar.gz文件:"
            find . -name "base.tar.gz" -type f 2>/dev/null
            exit 1
          fi

      - name: 🔧 合并配置文件
        run: |
          echo "🔧 合并配置文件..."
          cd openwrt-build
          
          # 备份原始配置（用于对比）
          cp .config .config.base
          echo "📋 原始配置项数: $(grep -c '^CONFIG_' .config.base)"
          
          # 查找用户配置文件
          if [ -f "../configs/${{ inputs.config }}.config" ]; then
            USER_CONFIG="../configs/${{ inputs.config }}.config"
          elif [ -f "../.github/configs/${{ inputs.config }}.config" ]; then
            USER_CONFIG="../.github/configs/${{ inputs.config }}.config"
          else
            echo "❌ 找不到用户配置文件: ${{ inputs.config }}.config"
            echo "📋 查找所有配置文件:"
            find .. -name "*.config" -type f 2>/dev/null
            exit 1
          fi
          
          echo "📋 应用用户配置: $USER_CONFIG"
          echo "📋 用户配置项数: $(grep -c '^CONFIG_' "$USER_CONFIG")"
          
          # 保存用户配置
          cp "$USER_CONFIG" .config.user
          
          # 合并配置
          while IFS= read -r line; do
            if [[ $line =~ ^CONFIG_ ]]; then
              key=$(echo "$line" | cut -d'=' -f1)
              if grep -q "^$key=" .config; then
                sed -i "s|^$key=.*|$line|" .config
              else
                echo "$line" >> .config
              fi
            fi
          done < "$USER_CONFIG"
          
          echo "✅ 用户配置合并完成"
          
          # 第一次 make defconfig - 补全用户配置的依赖
          echo ""
          echo "🔧 第一次 make defconfig - 补全用户配置依赖..."
          make defconfig
          echo "📋 合并用户配置后项数: $(grep -c '^CONFIG_' .config)"
          
          # 复制检查脚本
          if [ -f "../scripts/package-check.sh" ]; then
            cp ../scripts/package-check.sh ./
            chmod +x package-check.sh
          elif [ -f "../.github/scripts/package-check.sh" ]; then
            cp ../.github/scripts/package-check.sh ./
            chmod +x package-check.sh
          else
            echo "❌ 找不到package-check.sh脚本"
            exit 1
          fi
          
          # 第一次LUCI软件包检查（用户配置）
          echo ""
          echo "🔍 ==================== 用户配置LUCI软件包检查 ===================="
          if ./package-check.sh .config.user "用户配置-检查" false; then
            echo "✅ 用户配置检查通过"
          else
            echo "⚠️ 用户配置发现问题，将在最终配置时修复"
          fi
          
          # 查找并复制对比脚本
          if [ -f "../scripts/compare-packages.sh" ]; then
            cp ../scripts/compare-packages.sh ./
            chmod +x compare-packages.sh
          elif [ -f "../.github/scripts/compare-packages.sh" ]; then
            cp ../.github/scripts/compare-packages.sh ./
            chmod +x compare-packages.sh
          else
            echo "❌ 找不到compare-packages.sh脚本"
            exit 1
          fi
          
          # 第二阶段：对比基础配置和最终配置
          echo ""
          echo "🔍 ==================== 最终配置对比 ===================="
          echo "对比: 基础配置 → (基础配置 + ${{ inputs.config }}配置)"
          ./compare-packages.sh .config.base .config "最终配置-${{ inputs.config }}"
          
          # 第二次 make defconfig - 确保最终配置完整
          echo ""
          echo "🔧 第二次 make defconfig - 确保最终配置完整..."
          make defconfig
          echo "📋 最终配置项数: $(grep -c '^CONFIG_' .config)"

      - name: 🔍 检查LUCI软件包
        run: |
          echo "🔍 最终LUCI软件包检查..."
          cd openwrt-build
          
          # 最终LUCI软件包检查和自动修复
          echo ""
          echo "🔍 ==================== 最终LUCI软件包检查（自动修复） ===================="
          if ./package-check.sh .config "最终配置-${{ inputs.config }}-检查" true; then
            echo "✅ 所有LUCI软件包检查通过！"
          else
            echo "❌ LUCI软件包检查失败，最终编译将停止"
            exit 1
          fi
          
          # 复制报告
          if [ -f "最终配置-${{ inputs.config }}-检查.md" ]; then
            cp "最终配置-${{ inputs.config }}-检查.md" ../luci-final-check-${{ inputs.config }}.md
            echo "✅ 已保存最终检查报告"
          fi

      - name: 🚀 编译固件
        id: build
        run: |
          echo "🚀 开始编译固件..."
          cd openwrt-build
          
          # 设置编译参数
          echo "🔨 使用 $(nproc) 个核心并行编译"
          
          # 尝试并行编译
          if ! make -j$(nproc) IGNORE_ERRORS=1; then
            echo "⚠️ 并行编译失败，尝试单线程编译..."
            make -j1 V=s
          fi
          
          # 检查编译结果
          if [ -d "bin/targets" ] && [ "$(ls -A bin/targets)" ]; then
            echo "✅ 编译成功"
            echo "📦 生成的固件文件:"
            find bin/targets -name "*.bin" -type f -exec ls -lh {} \;
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ 编译失败，未找到固件文件"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📦 收集编译产物
        run: |
          echo "📦 收集编译产物..."
          mkdir -p artifacts
          
          # 复制固件文件
          echo "📂 收集固件文件..."
          find openwrt-build/bin/targets -name "*.bin" -type f -exec cp {} artifacts/ \;
          
          # 复制配置文件
          echo "📂 收集配置文件..."
          cp openwrt-build/.config artifacts/config-${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}.config
          find openwrt-build/bin/targets -name "*.manifest" -type f -exec cp {} artifacts/ \;
          find openwrt-build/bin/targets -name "config.buildinfo" -type f -exec cp {} artifacts/ \;
          
          # 复制软件包
          echo "📂 收集软件包..."
          mkdir -p artifacts/packages
          find openwrt-build/bin/packages -name "*.ipk" -type f -exec cp {} artifacts/packages/ \;
          
          # 复制所有报告
          echo "📂 收集报告文件..."
          cp openwrt-build/*.md artifacts/ 2>/dev/null || true
          cp luci-*.md artifacts/ 2>/dev/null || true
          
          # 生成文件清单
          echo "📋 生成文件清单..."
          ls -la artifacts/ > artifacts/filelist.txt
          echo "✅ 产物收集完成"
          echo "📊 产物统计:"
          echo "  - 固件文件: $(find artifacts -name '*.bin' | wc -l)"
          echo "  - 软件包: $(find artifacts/packages -name '*.ipk' | wc -l)"
          echo "  - 配置文件: $(find artifacts -name '*.config' | wc -l)"
          echo "  - 报告文件: $(find artifacts -name '*.md' | wc -l)"

      - name: 📤 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}-${{ github.run_id }}
          path: artifacts/
          retention-days: 7
          if-no-files-found: error
