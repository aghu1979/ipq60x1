name: OpenWrt Core Build

on:
  workflow_call:
    inputs:
      chip:
        required: true
        type: string
      branch:
        required: true
        type: string
      config:
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: false

jobs:
  prepare-base:
    runs-on: ubuntu-22.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
      build-path: ${{ steps.cache-key.outputs.path }}
    steps:
      - name: 🛠️ 初始化环境
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔑 生成缓存键
        id: cache-key
        run: |
          # 生成基于配置的缓存键
          CHIP_HASH=$(sha256sum .github/configs/base_${{ inputs.chip }}.config | cut -d' ' -f1)
          BRANCH_HASH=$(sha256sum .github/configs/base_${{ inputs.branch }}.config | cut -d' ' -f1)
          CACHE_KEY="base-${{ inputs.chip }}-${{ inputs.branch }}-${CHIP_HASH:0:8}-${BRANCH_HASH:0:8}"
          BUILD_PATH="build-base-${{ inputs.chip }}-${{ inputs.branch }}"
          
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "path=$BUILD_PATH" >> $GITHUB_OUTPUT
          echo "Generated cache key: $CACHE_KEY"

      - name: 📦 恢复基础环境缓存
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-key.outputs.path }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            base-${{ inputs.chip }}-${{ inputs.branch }}-

      - name: 🌱 准备基础环境
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "🔧 准备基础编译环境..."
          mkdir -p ${{ steps.cache-key.outputs.path }}
          
          # 设置源码仓库URL
          case "${{ inputs.branch }}" in
            "openwrt")
              REPO_URL="https://github.com/openwrt/openwrt"
              ;;
            "immwrt")
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              ;;
            "libwrt")
              REPO_URL="https://github.com/LibreWrt/LibreWrt"
              ;;
            *)
              echo "❌ 不支持的分支: ${{ inputs.branch }}"
              exit 1
              ;;
          esac
          
          # 克隆源码
          git clone --depth=1 $REPO_URL openwrt-src
          cd openwrt-src
          
          # 应用基础配置
          cp "../.github/configs/base_${{ inputs.chip }}.config" .config
          cat "../.github/configs/base_${{ inputs.branch }}.config" >> .config
          
          # 执行初始化脚本
          cp ../scripts/diy.sh ./
          cp ../scripts/repo.sh ./
          chmod +x diy.sh repo.sh
          ./diy.sh
          ./repo.sh
          
          # 更新feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # 准备编译环境
          make defconfig
          make -j$(nproc) IGNORE_ERRORS=1 download
          make -j$(nproc) IGNORE_ERRORS=1 tools/compile
          make -j$(nproc) IGNORE_ERRORS=1 toolchain/compile
          
          # 打包基础环境
          cd ..
          tar -czf ${{ steps.cache-key.outputs.path }}/base.tar.gz -C openwrt-src .
          echo "✅ 基础环境准备完成"

  build-firmware:
    needs: prepare-base
    runs-on: ubuntu-22.04
    outputs:
      build-status: ${{ steps.build.outputs.status }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 恢复基础环境
        run: |
          mkdir -p openwrt-build
          tar -xzf ${{ needs.prepare-base.outputs.build-path }}/base.tar.gz -C openwrt-build
          echo "✅ 基础环境恢复完成"

      - name: 🔧 合并配置文件
        run: |
          echo "🔧 合并配置文件..."
          cd openwrt-build
          
          # 备份原始配置
          cp .config .config.base
          
          # 合并用户配置
          if [ -f "../.github/configs/${{ inputs.config }}.config" ]; then
            while IFS= read -r line; do
              if [[ $line =~ ^CONFIG_ ]]; then
                key=$(echo "$line" | cut -d'=' -f1)
                if grep -q "^$key=" .config; then
                  sed -i "s|^$key=.*|$line|" .config
                else
                  echo "$line" >> .config
                fi
              fi
            done < "../.github/configs/${{ inputs.config }}.config"
          fi
          
          # 生成最终配置
          make defconfig
          
          echo "✅ 配置合并完成"
          echo "📊 配置统计:"
          echo "  - 基础配置项: $(grep -c '^CONFIG_' .config.base)"
          echo "  - 用户配置项: $(grep -c '^CONFIG_' "../.github/configs/${{ inputs.config }}.config" 2>/dev/null || echo 0)"
          echo "  - 最终配置项: $(grep -c '^CONFIG_' .config)"

      - name: 🔍 检查LUCI软件包
        run: |
          echo "🔍 检查LUCI软件包..."
          cd openwrt-build
          
          # 提取所有LUCI软件包
          LUCI_PACKAGES=$(grep "^CONFIG_PACKAGE_luci-" .config | sed 's/^CONFIG_PACKAGE_\(.*\)=y/\1/' | sort)
          echo "📦 需要的LUCI软件包:"
          echo "$LUCI_PACKAGES"
          
          # 检查软件包可用性
          MISSING_PACKAGES=""
          for pkg in $LUCI_PACKAGES; do
            if [ -d "package/feeds/packages/$pkg" ] || [ -d "package/feeds/luci/$pkg" ] || [ -d "package/$pkg" ]; then
              echo "✅ $pkg - 可用"
            else
              echo "❌ $pkg - 缺失"
              MISSING_PACKAGES="$MISSING_PACKAGES $pkg"
            fi
          done
          
          if [ -n "$MISSING_PACKAGES" ]; then
            echo ""
            echo "🚨 发现缺失的LUCI软件包: $MISSING_PACKAGES"
            echo "💡 修复建议:"
            echo "1. 检查软件包名称是否正确"
            echo "2. 更新第三方软件源"
            echo "3. 确认软件包在当前分支中可用"
            exit 1
          else
            echo ""
            echo "✅ 所有LUCI软件包检查通过！"
          fi

      - name: 🚀 编译固件
        id: build
        run: |
          echo "🚀 开始编译固件..."
          cd openwrt-build
          
          # 设置编译参数
          make -j$(nproc) || {
            echo "❌ 编译失败，尝试单线程编译..."
            make -j1 V=s
          }
          
          # 检查编译结果
          if [ -d "bin/targets" ]; then
            echo "✅ 编译成功"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ 编译失败"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📦 收集编译产物
        run: |
          echo "📦 收集编译产物..."
          mkdir -p artifacts
          
          # 复制固件文件
          find openwrt-build/bin/targets -name "*.bin" -type f -exec cp {} artifacts/ \;
          
          # 复制配置文件
          cp openwrt-build/.config artifacts/config-${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}.config
          find openwrt-build/bin/targets -name "*.manifest" -type f -exec cp {} artifacts/ \;
          find openwrt-build/bin/targets -name "config.buildinfo" -type f -exec cp {} artifacts/ \;
          
          # 复制软件包
          mkdir -p artifacts/packages
          find openwrt-build/bin/packages -name "*.ipk" -type f -exec cp {} artifacts/packages/ \;
          
          # 生成文件清单
          ls -la artifacts/ > artifacts/filelist.txt
          echo "✅ 产物收集完成"

      - name: 📤 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}-${{ github.run_id }}
          path: artifacts/
          retention-days: 7
          if-no-files-found: error
