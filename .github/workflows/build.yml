# ==============================================================================
# OpenWrt 多架构、多分支、多配置自动编译工作流
# 作者: Mary
# 描述: 此工作流旨在实现一个高度自动化、健壮且用户友好的固件编译流水线。
#       它支持多芯片、多分支、多配置的组合编译，并通过分阶段缓存和严格的
#       LUCI 软件包检查，确保编译效率和成功率。
# ==============================================================================

name: OpenWrt Auto Build

# 触发条件: 手动触发 或 定时触发 (北京时间周五 0:00 -> UTC 时间周四 16:00)
on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * 4' # "At 16:00 on Thursday" (UTC)

# 全局环境变量
env:
  # 定义芯片架构，方便后续统一修改
  CHIP_ARCH: ipq60xx
  # 定义 feeds 更新时的并发数
  FEEDS_THREADS: 4
  # 定义编译时的并发数
  BUILD_THREADS: $(nproc)
  # 定义产物存放目录
  ARTIFACTS_DIR: released_files
  # 定义日志文件名
  LOG_FILE: build.log

jobs:
  # ==============================================================================
  # Job 1: 准备阶段
  # 目的: 生成所有配置文件的哈希值，作为缓存键的一部分。
  # ==============================================================================
  prepare:
    name: 🚀 准备阶段 - 生成哈希
    runs-on: ubuntu-22.04
    outputs:
      # 将哈希文件的内容作为输出，传递给后续 Job
      hashes_file: ${{ steps.generate_hashes.outputs.hashes_file }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 生成配置文件哈希
        id: generate_hashes
        run: |
          # 调用脚本生成哈希文件
          bash scripts/generate-hashes.sh
          # 将哈希文件内容设置为输出变量
          echo "hashes_file<<EOF" >> $GITHUB_OUTPUT
          cat hashes.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # ==============================================================================
  # Job 2: 阶段一 - 构建基础编译环境
  # 目的: 为每个分支并行构建一个包含工具链、依赖和 dl 包的基础环境。
  #       并进行 LUCI 软件包预检。
  # ==============================================================================
  build-base:
    name: 🏗️ 阶段一 - 构建 [${{ matrix.branch }}] 基础环境
    runs-on: ubuntu-22.04
    needs: prepare
    # 定义矩阵，并行处理不同分支
    strategy:
      fail-fast: false # 即使某个矩阵任务失败，其他任务也继续运行
      matrix:
        branch:
          - { repo_short: openwrt, repo_url: "https://github.com/openwrt/openwrt.git", repo_branch: "master" }
          - { repo_short: immwrt, repo_url: "https://github.com/immortalwrt/immortalwrt.git", repo_branch: "master" }
          - { repo_short: libwrt, repo_url: "https://github.com/openwrt/openwrt.git", repo_branch: "openwrt-24.10" } # 注意：libwrt的源需要您确认，这里用官方24.10分支作为示例

    outputs:
      # 将基础环境编译状态传递给下一阶段
      base_env_success: ${{ steps.check_luci.outcome == 'success' }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 初始化日志系统
        run: |
          source scripts/logger.sh
          log_info "工作流开始，日志文件: ${{ env.LOG_FILE }}"
          echo "FULL_LOG_PATH=$(pwd)/${{ env.LOG_FILE }}" >> $GITHUB_ENV

      - name: 显示编译前磁盘空间
        run: |
          source scripts/logger.sh
          log_info "编译前磁盘空间:"
          df -hT | tee -a ${{ env.FULL_LOG_PATH }}

      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: 显示清理后磁盘空间
        run: |
          source scripts/logger.sh
          log_info "清理后磁盘空间:"
          df -hT | tee -a ${{ env.FULL_LOG_PATH }}

      - name: 恢复 DL 缓存
        id: cache-dl
        uses: actions/cache@v4
        with:
          path: dl/
          key: dl-${{ env.CHIP_ARCH }}-${{ hashFiles('hashes.txt') }}
          restore-keys: |
            dl-${{ env.CHIP_ARCH }}-

      - name: 恢复 Ccache 缓存
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ env.CHIP_ARCH }}-${{ matrix.branch.repo_short }}-${{ github.run_id }}
          restore-keys: |
            ccache-${{ env.CHIP_ARCH }}-${{ matrix.branch.repo_short }}-

      - name: 恢复基础环境缓存
        id: cache-base-env
        uses: actions/cache@v4
        with:
          path: |
            build_dir/target/
            build_dir/host/
            staging_dir/
            .config
            feeds.conf
          key: base-env-${{ matrix.branch.repo_short }}-${{ env.CHIP_ARCH }}-${{ hashFiles('hashes.txt') }}
          restore-keys: |
            base-env-${{ matrix.branch.repo_short }}-${{ env.CHIP_ARCH }}-

      - name: 设置编译环境
        if: steps.cache-base-env.outputs.cache-hit != 'true'
        run: |
          source scripts/logger.sh
          step_start "设置编译环境"
          
          # 定义一个可靠的、固定的依赖包列表作为备用
          FALLBACK_PACKAGES="build-essential ccache file git libncurses5-dev libpython3-dev libssl-dev python3-distutils python3-filelock python3-pip python3-pyelftools python3-setuptools rsync unzip wget zlib1g-dev qemu-user-static g++ g++-multilib libc6-dev-i386"
          
          # 尝试从网络获取依赖列表
          log_info "尝试从网络获取最新的依赖包列表..."
          ONLINE_PACKAGES=$(curl -fsSL git.io/depends-ubuntu-2204 || echo "")
          
          if [[ -n "$ONLINE_PACKAGES" ]]; then
            log_success "成功从网络获取依赖列表，将安装: $ONLINE_PACKAGES"
            PACKAGES_TO_INSTALL="$ONLINE_PACKAGES"
          else
            log_warn "网络获取失败，将使用预定义的备用依赖列表。"
            log_info "备用依赖列表: $FALLBACK_PACKAGES"
            PACKAGES_TO_INSTALL="$FALLBACK_PACKAGES"
          fi
          
          # 更新包列表并安装依赖
          sudo apt-get update
          sudo apt-get install -y $PACKAGES_TO_INSTALL
          
          # 停止 unattended-upgrades 服务，避免编译过程中被干扰
          # 使用 || true 确保即使服务不存在也不会报错
          sudo systemctl stop unattended-upgrades.service || true
          
          step_end "设置编译环境"

      - name: 克隆源码
        if: steps.cache-base-env.outputs.cache-hit != 'true'
        run: |
          source scripts/logger.sh
          step_start "克隆 ${{ matrix.branch.repo_short }} 源码"
          git clone ${{ matrix.branch.repo_url }} openwrt
          cd openwrt
          git checkout ${{ matrix.branch.repo_branch }}
          step_end "克隆 ${{ matrix.branch.repo_short }} 源码"

      - name: 加载自定义脚本
        if: steps.cache-base-env.outputs.cache-hit != 'true'
        run: |
          source scripts/logger.sh
          step_start "加载自定义脚本"
          # 进入源码目录执行
          cd openwrt
          # 【关键修改】复制整个 scripts 目录到源码目录内
          cp -r ../scripts .
          # 执行 diy.sh
          chmod +x scripts/diy.sh
          ./scripts/diy.sh
          step_end "加载自定义脚本"

      - name: 更新 Feeds
        if: steps.cache-base-env.outputs.cache-hit != 'true'
        run: |
          source scripts/logger.sh
          step_start "更新 Feeds"
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          step_end "更新 Feeds"

      - name: 合并基础配置
        if: steps.cache-base-env.outputs.cache-hit != 'true'
        run: |
          source scripts/utils.sh
          step_start "合并基础配置"
          cd openwrt
          # 合并芯片配置和分支配置
          merge_configs "../configs/base_${{ env.CHIP_ARCH }}.config" "../configs/base_${{ matrix.branch.repo_short }}.config"
          step_end "合并基础配置"

      - name: 下载源码包
        if: steps.cache-base-env.outputs.cache-hit != 'true'
        run: |
          source scripts/logger.sh
          step_start "下载所有源码包"
          cd openwrt
          make defconfig
          make download -j${{ env.FEEDS_THREADS }}
          step_end "下载所有源码包"

      - name: 预编译工具链和核心工具
        if: steps.cache-base-env.outputs.cache-hit != 'true'
        run: |
          source scripts/logger.sh
          step_start "预编译工具链和核心工具"
          cd openwrt
          make -j$(nproc) tools/compile
          make -j$(nproc) toolchain/compile
          make -j$(nproc) target/compile LINUX_UNAME_VERSION=6.6.47 # 示例内核版本，实际由.config决定
          step_end "预编译工具链和核心工具"

      - name: LUCI 软件包预检
        id: check_luci
        # 即使缓存命中，也要检查，因为配置可能更新了
        run: |
          source scripts/logger.sh
          step_start "LUCI 软件包预检 (Profile: Pro)"
          cd openwrt
          # 模拟合并 Pro 配置
          merge_configs ".config" "../configs/Pro.config"
          # 调用检查脚本
          bash ../scripts/check-luci.sh "Pro" ".config" "../configs/Pro.config"
          step_end "LUCI 软件包预检 (Profile: Pro)"

  # ==============================================================================
  # Job 3: 阶段二 - 构建最终固件
  # 目的: 在基础环境之上，并行编译所有最终固件。
  # ==============================================================================
  build-final:
    name: 📦 阶段二 - 构建 [${{ matrix.branch }}-${{ matrix.profile }}] 固件
    runs-on: ubuntu-22.04
    needs: build-base
    # 只有当所有基础环境都成功构建后，才执行此阶段
    if: needs.build-base.outputs.base_env_success == 'true'
    strategy:
      fail-fast: false
      matrix:
        branch:
          - { repo_short: openwrt, repo_url: "https://github.com/openwrt/openwrt.git", repo_branch: "master" }
          - { repo_short: immwrt, repo_url: "https://github.com/immortalwrt/immortalwrt.git", repo_branch: "master" }
          - { repo_short: libwrt, repo_url: "https://github.com/openwrt/openwrt.git", repo_branch: "openwrt-24.10" }
        profile: [Pro, Max, Ultra]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 初始化日志系统
        run: |
          source scripts/logger.sh
          log_info "工作流开始，日志文件: ${{ env.LOG_FILE }}"
          echo "FULL_LOG_PATH=$(pwd)/${{ env.LOG_FILE }}" >> $GITHUB_ENV

      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main

      - name: 恢复 DL 缓存
        uses: actions/cache@v4
        with:
          path: dl/
          key: dl-${{ env.CHIP_ARCH }}-${{ hashFiles('hashes.txt') }}

      - name: 恢复 Ccache 缓存
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ env.CHIP_ARCH }}-${{ matrix.branch.repo_short }}-${{ github.run_id }}

      - name: 恢复基础环境缓存
        uses: actions/cache@v4
        with:
          path: |
            build_dir/target/
            build_dir/host/
            staging_dir/
            .config
            feeds.conf
          key: base-env-${{ matrix.branch.repo_short }}-${{ env.CHIP_ARCH }}-${{ hashFiles('hashes.txt') }}

      - name: 克隆源码
        run: |
          source scripts/logger.sh
          step_start "克隆 ${{ matrix.branch.repo_short }} 源码"
          git clone ${{ matrix.branch.repo_url }} openwrt
          cd openwrt
          git checkout ${{ matrix.branch.repo_branch }}
          step_end "克隆 ${{ matrix.branch.repo_short }} 源码"

      - name: 合并最终配置
        run: |
          source scripts/utils.sh
          step_start "合并最终配置 [${{ matrix.profile }}]"
          cd openwrt
          # 合并芯片、分支、软件包配置
          merge_configs "../configs/base_${{ env.CHIP_ARCH }}.config" "../configs/base_${{ matrix.branch.repo_short }}.config" "../configs/${{ matrix.profile }}.config"
          step_end "合并最终配置 [${{ matrix.profile }}]"

      - name: LUCI 软件包终检
        run: |
          source scripts/logger.sh
          step_start "LUCI 软件包终检 (Profile: ${{ matrix.profile }})"
          cd openwrt
          make defconfig
          # 调用检查脚本，进行最终确认
          bash ../scripts/check-luci.sh "${{ matrix.profile }}" ".config" "../configs/${{ matrix.profile }}.config"
          step_end "LUCI 软件包终检 (Profile: ${{ matrix.profile }})"

      - name: 开始编译固件
        run: |
          source scripts/logger.sh
          step_start "开始编译固件 [${{ matrix.branch }}-${{ matrix.profile }}]"
          cd openwrt
          make -j$(nproc) || make -j1 V=s
          step_end "开始编译固件 [${{ matrix.branch }}-${{ matrix.profile }}]"

      - name: 整理和重命名产物
        run: |
          source scripts/utils.sh
          source scripts/logger.sh
          step_start "整理和重命名产物"
          
          # 创建临时目录存放产物
          mkdir -p ${{ env.ARTIFACTS_DIR }}/${{ matrix.branch.repo_short }}-${{ matrix.profile }}
          
          cd openwrt
          
          # 提取设备列表
          devices=$(extract_devices "../configs/base_${{ env.CHIP_ARCH }}.config")
          log_info "提取到的设备列表: $devices"
          
          # 遍历设备，重命名文件
          for device in $devices; do
            log_info "正在处理设备: $device"
            
            # 查找并重命名固件
            find bin/targets/ -name "*${device}*-squashfs-sysupgrade.bin" -print0 | while IFS= read -r -d '' file; do
              new_name="${{ matrix.branch.repo_short }}-${device}-sysupgrade-${{ matrix.profile }}.bin"
              log_info "重命名固件: $(basename "$file") -> $new_name"
              cp "$file" "../${{ env.ARTIFACTS_DIR }}/${{ matrix.branch.repo_short }}-${{ matrix.profile }}/$new_name"
            done
            
            find bin/targets/ -name "*${device}*-squashfs-factory.bin" -print0 | while IFS= read -r -d '' file; do
              new_name="${{ matrix.branch.repo_short }}-${device}-factory-${{ matrix.profile }}.bin"
              log_info "重命名固件: $(basename "$file") -> $new_name"
              cp "$file" "../${{ env.ARTIFACTS_DIR }}/${{ matrix.branch.repo_short }}-${{ matrix.profile }}/$new_name"
            done
            
            # 复制并重命名配置和清单文件
            cp .config "../${{ env.ARTIFACTS_DIR }}/${{ matrix.branch.repo_short }}-${{ matrix.profile }}/${{ matrix.branch.repo_short }}-${device}-${{ matrix.profile }}.config"
            cp bin/targets/*/manifest "../${{ env.ARTIFACTS_DIR }}/${{ matrix.branch.repo_short }}-${{ matrix.profile }}/${{ matrix.branch.repo_short }}-${device}-${{ matrix.profile }}.manifest"
            cp config.buildinfo "../${{ env.ARTIFACTS_DIR }}/${{ matrix.branch.repo_short }}-${{ matrix.profile }}/${{ matrix.branch.repo_short }}-${device}-${{ matrix.profile }}.config.buildinfo"
          done
          
          # 复制所有 ipk 文件到统一目录，允许覆盖
          mkdir -p "../${{ env.ARTIFACTS_DIR }}/packages"
          find bin/packages/ -name "*.ipk" -exec cp {} "../${{ env.ARTIFACTS_DIR }}/packages/" \;
          
          step_end "整理和重命名产物"

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.branch.repo_short }}-${{ matrix.profile }}-artifacts
          path: ${{ env.ARTIFACTS_DIR }}/
          retention-days: 7

  # ==============================================================================
  # Job 4: 发布阶段
  # 目的: 收集所有产物，打包，并创建 GitHub Release。
  # ==============================================================================
  release:
    name: 🎉 发布阶段
    runs-on: ubuntu-22.04
    needs: [prepare, build-final]
    if: always() && needs.build-final.result == 'success'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 初始化日志系统
        run: |
          source scripts/logger.sh
          log_info "工作流开始，日志文件: ${{ env.LOG_FILE }}"
          echo "FULL_LOG_PATH=$(pwd)/${{ env.LOG_FILE }}" >> $GITHUB_ENV

      - name: 下载所有产物
        uses: actions/download-artifact@v4
        with:
          path: all_artifacts

      - name: 整理和打包发布文件
        run: |
          source scripts/utils.sh
          source scripts/logger.sh
          step_start "整理和打包发布文件"
          
          mkdir -p release_upload
          
          # 1. 打包所有配置文件
          find all_artifacts -name "*.config" -print0 | tar -czf release_upload/${{ env.CHIP_ARCH }}-config.tar.gz --null -T -
          log_success "配置文件打包完成: ${{ env.CHIP_ARCH }}-config.tar.gz"
          
          # 2. 打包所有软件包
          if [ -d "all_artifacts/*/packages" ]; then
            tar -czf release_upload/${{ env.CHIP_ARCH }}-app.tar.gz -C all_artifacts/*/packages .
            log_success "软件包打包完成: ${{ env.CHIP_ARCH }}-app.tar.gz"
          fi
          
          # 3. 打包所有日志
          find all_artifacts -name "*.log" -print0 | tar -czf release_upload/${{ env.CHIP_ARCH }}-log.tar.gz --null -T -
          log_success "日志文件打包完成: ${{ env.CHIP_ARCH }}-log.tar.gz"
          
          # 4. 移动所有固件到发布目录
          find all_artifacts -name "*.bin" -exec cp {} release_upload/ \;
          log_success "所有固件文件已移动到发布目录"
          
          # 5. 生成 Release Notes
          kernel_version=$(get_kernel_version "all_artifacts")
          luci_apps_list=$(find release_upload -name "*.manifest" -exec cat {} \; | grep -E "luci-app-.*" | awk '{print $1}' | sort -u | tr '\n' ', ' | sed 's/,$//')
          
          cat > release_upload/ReleaseNotes.md << EOF
          ## OpenWrt 固件发布
          
          ---
          
          ### 📋 基本信息
          - **芯片架构**: ${{ env.CHIP_ARCH }}
          - **源码分支**: openwrt, immwrt, libwrt
          - **软件包配置**: Pro, Max, Ultra
          - **内核版本**: ${kernel_version}
          - **编译时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **作者**: Mary
          
          ### 🔑 默认设置
          - **管理地址**: 192.168.111.1
          - **默认用户**: root
          - **默认密码**: none (空密码)
          - **默认WiFi**: OpenWrt (密码: 12345678)
          
          ### 📦 编译的 LUCI 应用列表
          ${luci_apps_list}
          
          ### 📥 附件说明
          - `*-factory.bin`: 用于从原厂固件刷入。
          - `*-sysupgrade.bin`: 用于在现有 OpenWrt 系统上升级。
          - `${{ env.CHIP_ARCH }}-config.tar.gz`: 所有设备的 .config, .manifest, config.buildinfo 文件。
          - `${{ env.CHIP_ARCH }}-app.tar.gz`: 所有编译生成的 .ipk 软件包。
          - `${{ env.CHIP_ARCH }}-log.tar.gz`: 本次编译的详细日志。
          
          ---
          
          **注意**: 刷机前请确认设备型号，刷错有变砖风险！
          EOF
          
          step_end "整理和打包发布文件"

      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.CHIP_ARCH }}-$(date '+%Y-%m-%d')
          name: OpenWrt ${{ env.CHIP_ARCH }} Firmware $(date '+%Y-%m-%d')
          body_path: release_upload/ReleaseNotes.md
          files: |
            release_upload/*.bin
            release_upload/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
