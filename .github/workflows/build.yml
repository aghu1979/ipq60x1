# .github/workflows/reusable_builder.yml
name: 🏭 可复用构建工厂

on:
  workflow_call:
    inputs:
      os_version:
        required: true
        type: string
      chipset:
        required: true
        type: string
      branch:
        required: true
        type: string
      profile:
        required: true
        type: string
      hashes-value:
        required: true
        type: string
      devices:
        required: true
        type: string

# 全局环境变量
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  DIY_P1_SH: scripts/diy.sh
  DIY_P2_SH: scripts/repo.sh
  UPLOAD_FIRMWARE_DIR: firmware
  UPLOAD_CONFIG_DIR: config
  UPLOAD_PACKAGES_DIR: packages
  UPLOAD_LOGS_DIR: logs
  CONFIG_FILE: .config
  # 定义输出颜色和图标
  COLOR_ERROR: '\033[1;31m'
  COLOR_WARN: '\033[1;33m'
  COLOR_INFO: '\033[1;36m'
  COLOR_SUCCESS: '\033[1;32m'
  COLOR_RESET: '\033[0m'
  ICON_ERROR: '❌'
  ICON_WARN: '⚠️'
  ICON_INFO: 'ℹ️'
  ICON_SUCCESS: '✅'

jobs:
  build:
    name: 🛠️ 编译 ${{ inputs.profile }}
    runs-on: ${{ inputs.os_version }}
    permissions:
      contents: read
    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: 💾 显示编译前磁盘空间
        run: |
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 编译前磁盘空间: ${{ env.COLOR_RESET}}"
          df -hT

      - name: 🧹 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: 💾 显示清理后磁盘空间
        run: |
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 清理后磁盘空间: ${{ env.COLOR_RESET}}"
          df -hT

      - name: 📦 恢复/创建缓存
        uses: actions/cache@v4
        with:
          path: |
            ./dl
            ./ccache
            ./toolchain
            ./build_dir
            ./staging_dir
            ./tmp
          key: ${{ inputs.chipset }}-${{ inputs.branch }}-${{ inputs.hashes-value }}
          restore-keys: |
            ${{ inputs.chipset }}-${{ inputs.branch }}-

      - name: 🛠️ 安装编译依赖
        run: |
          sudo rm -rf /etc/apt/sources.list.d/*
          sudo apt-get update
          sudo apt-get install -y $(curl -fsSL git.io/depends-ubuntu-2204)
          echo -e "${{ env.COLOR_SUCCESS}}${{ env.ICON_SUCCESS}} 依赖安装完成${{ env.COLOR_RESET}}"

      - name: 🌱 准备基础环境
        run: |
          set -euo pipefail
          if [ ! -d "toolchain" ]; then
            echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 缓存未命中，开始准备基础编译环境...${{ env.COLOR_RESET}}"
            git clone ${{ env.REPO_URL }} immortalwrt
            cd immortalwrt
            cat ../configs/base_${{ inputs.chipset }}.config > .config
            cat ../configs/base_${{ inputs.branch }}.config >> .config
            chmod +x ../${{ env.DIY_P2_SH }}
            ../${{ env.DIY_P2_SH }}
            ./scripts/feeds update -a
            ./scripts/feeds install -a
            make defconfig
            make toolchain/install -j$(nproc) || make toolchain/install -j1 # 如果并行失败，尝试单线程
            echo -e "${{ env.COLOR_SUCCESS}}${{ env.ICON_SUCCESS}} 基础环境准备完成，已缓存。${{ env.COLOR_RESET}}"
          else
            echo -e "${{ env.COLOR_SUCCESS}}${{ env.ICON_SUCCESS}} 缓存命中，跳过基础环境准备。${{ env.COLOR_RESET}}"
            # 即使缓存命中，也需要检出源码
            git clone ${{ env.REPO_URL }} immortalwrt
          fi

      - name: 🏗️ 编译固件 (${{ inputs.profile }})
        id: compile
        run: |
          set -euo pipefail
          LOG_FILE="build_${{ inputs.profile }}.log"
          cd immortalwrt
          
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} ---------- 开始编译配置: ${{ inputs.profile }} ----------${{ env.COLOR_RESET}}" | tee "../${{ env.UPLOAD_LOGS_DIR }}/$LOG_FILE"
          
          # 1. 合并配置
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 步骤 1: 合并配置文件...${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_LOGS_DIR }}/$LOG_FILE"
          cat ../configs/${{ inputs.profile }}.config >> .config
          
          # 2. 检查 LuCI 软件包
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 步骤 2: 检查 LuCI 软件包依赖...${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_LOGS_DIR }}/$LOG_FILE"
          chmod +x ../scripts/check_luci.sh
          ../scripts/check_luci.sh .config | tee -a "../${{ env.UPLOAD_LOGS_DIR }}/$LOG_FILE"
          
          # 3. 开始编译
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 步骤 3: 开始编译固件...${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_LOGS_DIR }}/$LOG_FILE"
          make -j$(nproc) | tee -a "../${{ env.UPLOAD_LOGS_DIR }}/$LOG_FILE"
          
          # 4. 运行 DIY 脚本
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 步骤 4: 执行 DIY 脚本...${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_LOGS_DIR }}/$LOG_FILE"
          chmod +x ../${{ env.DIY_P1_SH }}
          ../${{ env.DIY_P1_SH }}
          
          echo -e "${{ env.COLOR_SUCCESS}}${{ env.ICON_SUCCESS}} ---------- 配置 ${{ inputs.profile }} 编译完成 ----------${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_LOGS_DIR }}/$LOG_FILE"

      - name: 📦 收集并重命名产物
        if: steps.compile.outcome == 'success'
        run: |
          set -euo pipefail
          cd immortalwrt
          # 创建临时目录
          mkdir -p "../${{ env.UPLOAD_FIRMWARE_DIR }}"
          mkdir -p "../${{ env.UPLOAD_CONFIG_DIR }}"
          mkdir -p "../${{ env.UPLOAD_PACKAGES_DIR }}"
          
          # 从 inputs.devices 中获取设备列表
          DEVICES="${{ inputs.devices }}"
          for DEVICE in $DEVICES; do
            # 复制并重命名固件
            find bin/targets/*/* -type f \( -name "*${DEVICE}*-squashfs-sysupgrade.bin" -o -name "*${DEVICE}*-squashfs-factory.bin" \) | while read -r f; do
              if [[ "$f" =~ .*-squashfs-(sysupgrade|factory)\.bin$ ]]; then
                TYPE="${BASH_REMATCH[1]}"
                NEW_NAME="${{ inputs.branch }}-${DEVICE}-${TYPE}-${{ inputs.profile }}.bin"
                cp "$f" "../${{ env.UPLOAD_FIRMWARE_DIR }}/$NEW_NAME"
                echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 固件已重命名: $NEW_NAME${{ env.COLOR_RESET}}"
              fi
            done
            # 复制配置、清单等信息
            cp .config "../${{ env.UPLOAD_CONFIG_DIR }}/${{ inputs.branch }}-${{ inputs.chipset }}-${DEVICE}-${{ inputs.profile }}.config"
            cp bin/targets/*/*/${DEVICE}.manifest "../${{ env.UPLOAD_CONFIG_DIR }}/${{ inputs.branch }}-${{ inputs.chipSET }}-${DEVICE}-${{ inputs.profile }}.manifest"
            cp .config.buildinfo "../${{ env.UPLOAD_CONFIG_DIR }}/${{ inputs.branch }}-${{ inputs.chipset }}-${DEVICE}-${{ inputs.profile }}.config.buildinfo"
          done
          
          # 复制所有 ipk 文件
          cp bin/packages/**/*.ipk ../${{ env.UPLOAD_PACKAGES_DIR }}/ 2>/dev/null || true

      - name: 📤 上传产物
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build_artifacts_${{ inputs.profile }}
          path: |
            ${{ env.UPLOAD_FIRMWARE_DIR }}
            ${{ env.UPLOAD_CONFIG_DIR }}
            ${{ env.UPLOAD_PACKAGES_DIR }}
            ${{ env.UPLOAD_LOGS_DIR }}
          retention-days: 7
