# OpenWrt 多配置自动编译工作流
# 支持多芯片架构、多分支、多配置的并行编译
# 作者: Mary
# 首次创建: 2025-10-18
# 最后更新: 2025-10-18

name: OpenWrt Multi-Config Build

# 触发条件
on:
  # 定时触发：北京时间每周五0点 (UTC时间周四16点)
  schedule:
    - cron: '0 16 * * 4'
  # 手动触发
  workflow_dispatch:
    inputs:
      ubuntu_version:
        description: '选择Ubuntu版本'
        required: true
        default: '22.04'
        type: choice
        options:
          - '22.04'
          - '24.04'
      force_rebuild:
        description: '强制重新编译（忽略缓存）'
        required: false
        default: false
        type: boolean

# 环境变量
env:
  TZ: Asia/Shanghai  # 时区设置
  CACHE_VERSION: v2  # 缓存版本号，用于缓存失效控制

# 任务定义
jobs:
  # 阶段1：生成配置哈希值
  # 此任务用于生成所有配置文件的哈希值，作为缓存的key
  generate-hashes:
    name: 生成配置哈希
    runs-on: ubuntu-latest
    outputs:
      # 输出哈希文件内容
      hashes-file: ${{ steps.hash.outputs.hashes-file }}
      # 输出缓存key
      cache-key: ${{ steps.hash.outputs.cache-key }}
      # 输出配置文件数量
      config-count: ${{ steps.hash.outputs.config-count }}
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 生成哈希文件
      - name: 生成配置哈希文件
        id: hash
        run: |
          # 创建哈希文件
          {
            echo "# Configuration Hashes - $(date)"
            echo "# Generated by OpenWrt Build System"
            echo ""
            # 查找所有配置文件并生成哈希
            find configs/ -type f -name "*.config" -exec sha256sum {} \; | \
              sed 's|configs/||' | \
              sort | \
              awk '{print $2 "=" $1}'
          } > hashes-file
          
          # 统计配置文件数量
          CONFIG_COUNT=$(wc -l < hashes-file)
          
          # 生成缓存key（基于所有配置文件的哈希）
          CACHE_KEY="openwrt-$(cat hashes-file | sha256sum | cut -d' ' -f1)"
          
          # 输出到GitHub Actions
          {
            echo "hashes-file<<EOF"
            cat hashes-file
            echo "EOF"
            echo "cache-key=$CACHE_KEY"
            echo "config-count=$CONFIG_COUNT"
          } >> $GITHUB_OUTPUT
          
          # 日志输出
          echo "✅ 生成哈希文件完成"
          echo "📊 配置文件数量: $CONFIG_COUNT"
          echo "🔑 缓存Key: $CACHE_KEY"

  # 阶段2：准备基础环境
  # 此任务负责准备编译所需的基础环境和依赖
  prepare-base:
    name: 准备基础环境
    needs: generate-hashes
    runs-on: ubuntu-${{ github.event.inputs.ubuntu_version || '22.04' }}
    outputs:
      # 缓存是否命中
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
      # 基础环境是否准备完成
      base-ready: ${{ steps.prepare.outputs.base-ready }}
      # 基础环境路径
      base-path: ${{ steps.prepare.outputs.base-path }}
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 清理磁盘空间
      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          # 保留工具缓存
          tool-cache: true
          # 删除Android工具
          android: true
          # 删除.NET工具
          dotnet: true
          # 删除Haskell工具
          haskell: true
          # 删除Docker镜像
          docker-images: true
          # 删除大包
          large-packages: true
          # 创建swap文件
          swap-storage: true

      # 安装编译依赖
      - name: 安装编译依赖
        run: |
          # 更新包列表
          sudo apt-get update
          # 安装编译所需的包
          sudo apt-get install -y \
            build-essential \
            clang \
            flex \
            bison \
            g++ \
            gawk \
            gcc-multilib \
            g++-multilib \
            gettext \
            libelf-dev \
            libssl-dev \
            libncurses5-dev \
            libncursesw5-dev \
            python3-distutils-extra \
            rsync \
            unzip \
            python3-pyelftools \
            python3-setuptools \
            python3-pip \
            python3-pyelftools \
            zlib1g-dev \
            subversion \
            git \
            wget \
            time \
            python3 \
            ccache \
            curl

      # 尝试恢复缓存
      - name: 恢复基础环境缓存
        id: cache
        uses: actions/cache@v3
        with:
          # 缓存路径
          path: |
            base_env/
            dl/
            build_dir/host/
            build_dir/toolchain-*/
            staging_dir/host/
            staging_dir/toolchain-*/
            toolchain/
            .ccache
            feeds/
          # 缓存key
          key: ${{ needs.generate-hashes.outputs.cache-key }}-${{ env.CACHE_VERSION }}-${{ runner.os }}
          # 备用key（用于部分缓存命中）
          restore-keys: |
            openwrt--${{ env.CACHE_VERSION }}-${{ runner.os }}

      # 准备基础环境（缓存未命中时）
      - name: 准备基础环境
        id: prepare
        if: steps.cache.outputs.cache-hit != 'true' || github.event.inputs.force_rebuild == 'true'
        run: |
          # 创建基础环境目录
          mkdir -p base_env
          
          # 克隆主仓库（使用OpenWrt作为基础）
          echo "📥 克隆基础仓库..."
          git clone https://github.com/laipeng668/openwrt.git base_env/openwrt
          cd base_env/openwrt
          
          # 设置执行权限
          chmod +x ../scripts/*.sh
          
          # 执行DIY脚本准备环境
          echo "🔧 执行DIY脚本..."
          ../scripts/diy.sh openwrt ipq60xx
          
          # 更新feeds
          echo "📦 更新feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # 保存哈希文件
          cp ../../hashes-file ./
          
          # 返回上级目录
          cd ../..
          
          # 输出准备完成标志
          echo "base-ready=true" >> $GITHUB_OUTPUT
          echo "base-path=base_env/openwrt" >> $GITHUB_OUTPUT
          
          echo "✅ 基础环境准备完成"

  # 阶段3：并行编译所有配置
  # 此任务使用矩阵策略并行编译所有分支和配置组合
  build-configs:
    name: 编译固件 (${{ matrix.branch }}-${{ matrix.config }})
    needs: [generate-hashes, prepare-base]
    # 只有在基础环境准备完成或缓存命中时才执行
    if: always() && (needs.prepare-base.outputs.base-ready == 'true' || needs.prepare-base.outputs.cache-hit == 'true')
    runs-on: ubuntu-${{ github.event.inputs.ubuntu_version || '22.04' }}
    strategy:
      # 不因单个任务失败而终止其他任务
      fail-fast: false
      # 矩阵定义
      matrix:
        # 分支列表
        branch: [openwrt, immwrt, libwrt]
        # 配置列表
        config: [Pro, Max, Ultra]
        # 分支配置包含
        include:
          # OpenWrt分支配置
          - branch: openwrt
            repo_url: https://github.com/laipeng668/openwrt.git
            repo_branch: master
            repo_short: openwrt
          # ImmortalWrt分支配置
          - branch: immwrt
            repo_url: https://github.com/laipeng668/immortalwrt.git
            repo_branch: master
            repo_short: immwrt
          # LibWrt分支配置
          - branch: libwrt
            repo_url: https://github.com/laipeng668/openwrt-6.x.git
            repo_branch: k6.12-nss
            repo_short: libwrt
    # 超时设置：3小时
    timeout-minutes: 180
    
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 清理磁盘空间
      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main

      # 恢复基础环境缓存
      - name: 恢复基础环境缓存
        uses: actions/cache@v3
        with:
          path: |
            base_env/
            dl/
            build_dir/host/
            build_dir/toolchain-*/
            staging_dir/host/
            staging_dir/toolchain-*/
            toolchain/
            .ccache
            feeds/
          key: ${{ needs.generate-hashes.outputs.cache-key }}-${{ env.CACHE_VERSION }}-${{ runner.os }}

      # 设置编译环境
      - name: 设置编译环境
        run: |
          # 安装编译依赖
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            flex \
            bison \
            g++ \
            gawk \
            gcc-multilib \
            g++-multilib \
            gettext \
            libelf-dev \
            libssl-dev \
            libncurses5-dev \
            libncursesw5-dev \
            python3-distutils-extra \
            rsync \
            unzip \
            python3-pyelftools \
            python3-setuptools \
            python3-pip \
            python3-pyelftools \
            zlib1g-dev
          
          # 设置ccache环境变量
          echo "export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV
          echo "export CCACHE_MAXSIZE=5G" >> $GITHUB_ENV
          
          # 初始化日志系统
          source ./scripts/logger.sh
          log_info "开始编译 ${{ matrix.branch }}-${{ matrix.config }}"

      # 准备源码
      - name: 准备源码
        run: |
          # 加载日志模块
          source ./scripts/logger.sh
          step_start "准备源码"
          
          # 复制基础环境或克隆新仓库
          if [ -d "base_env/openwrt" ]; then
            echo "📁 复制基础环境..."
            cp -r base_env/openwrt ./
          else
            echo "📥 克隆仓库: ${{ matrix.repo_url }}"
            git clone ${{ matrix.repo_url }} openwrt
          fi
          
          # 进入源码目录
          cd openwrt
          
          # 恢复哈希文件
          cp ../hashes-file ./
          
          # 执行DIY脚本
          chmod +x ../scripts/*.sh
          ../scripts/diy.sh ${{ matrix.branch }} ipq60xx
          
          step_end "源码准备完成"

      # 合并配置文件
      - name: 合并配置文件
        run: |
          # 加载日志模块
          source ./scripts/logger.sh
          cd openwrt
          step_start "合并配置文件"
          
          # 合并配置（优先级从低到高）
          ../scripts/merge_config.sh ipq60xx ${{ matrix.branch }} ${{ matrix.config }}
          
          step_end "配置合并完成"

      # 检查软件包
      - name: 检查软件包
        run: |
          # 加载日志模块
          source ./scripts/logger.sh
          cd openwrt
          step_start "检查软件包"
          
          # 执行软件包检查
          ../scripts/check_packages.sh
          
          step_end "软件包检查完成"

      # 编译固件
      - name: 编译固件
        run: |
          # 加载日志模块
          source ./scripts/logger.sh
          cd openwrt
          step_start "编译固件"
          
          # 设置编译参数
          export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache
          export CCACHE_MAXSIZE=5G
          
          # 开始编译
          echo "🔥 开始编译固件..."
          make -j$(nproc) 2>&1 | tee compile.log
          
          # 检查编译结果
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            log_error "编译失败！"
            # 保存错误日志
            tail -n 1000 compile.log > error.log
            exit 1
          fi
          
          step_end "固件编译完成"

      # 处理产出物
      - name: 处理产出物
        run: |
          # 加载日志模块
          source ./scripts/logger.sh
          cd openwrt
          step_start "处理产出物"
          
          # 处理产出物
          ../scripts/process_artifacts.sh ${{ matrix.branch }} ${{ matrix.config }} ipq60xx
          
          step_end "产出物处理完成"

      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-${{ matrix.branch }}-${{ matrix.config }}
          path: |
            openwrt/artifacts/
            openwrt/*.log
          # 保留7天
          retention-days: 7

  # 阶段4：创建Release
  # 此任务负责创建GitHub Release并上传所有产出物
  create-release:
    name: 创建Release
    needs: [generate-hashes, build-configs]
    # 只有在所有编译任务成功时才执行
    if: always() && needs.build-configs.result == 'success'
    runs-on: ubuntu-latest
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 下载所有构建产物
      - name: 下载所有构建产物
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      # 准备发布内容
      - name: 准备发布内容
        run: |
          # 加载日志模块
          source ./scripts/logger.sh
          step_start "准备发布"
          
          # 创建发布目录
          mkdir -p release
          
          # 复制固件文件
          echo "📦 收集固件文件..."
          find artifacts -name "*.bin" -exec cp {} release/ \;
          
          # 打包配置文件
          echo "📦 打包配置文件..."
          find artifacts -name "*.config*" -exec cp {} release/ \;
          tar -czf release/ipq60xx-config.tar.gz -C release $(ls release/*.config* | xargs -n1 basename)
          
          # 打包软件包
          echo "📦 打包软件包..."
          mkdir -p release/packages
          find artifacts -name "*.ipk" -exec cp {} release/packages/ \; 2>/dev/null || true
          tar -czf release/ipq60xx-app.tar.gz -C release/packages .
          
          # 打包日志
          echo "📦 打包日志..."
          find artifacts -name "*.log" -exec cp {} release/ \;
          tar -czf release/ipq60xx-log.tar.gz -C release $(ls release/*.log | xargs -n1 basename)
          
          # 生成发布说明
          echo "📝 生成发布说明..."
          ../scripts/prepare_release.sh > release_notes.md
          
          step_end "发布准备完成"

      # 创建Release
      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          # Release标签
          tag_name: ipq60xx-$(date +%Y%m%d)
          # Release内容
          body_path: release_notes.md
          # 上传文件
          files: |
            release/*.bin
            release/*.tar.gz
          # 非草稿
          draft: false
          # 非预发布
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 清理旧版本
      - name: 清理旧版本
        run: |
          # 保留最近7个版本
          echo "🧹 清理旧版本..."
          gh release list --repo ${{ github.repository }} --limit 20 | \
            tail -n +8 | \
            awk '{print $1}' | \
            xargs -I {} gh release delete {} --repo ${{ github.repository }} --yes || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
