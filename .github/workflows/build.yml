# OpenWrt 多配置自动编译工作流
# 支持多芯片架构、多分支、多配置的并行编译
# 首次创建: 2025-10-18
# 最后更新: 2025-10-18

name: OpenWrt Multi-Config Build

# 触发条件
on:
  # 定时触发：北京时间每周五0点 (UTC时间周四16点)
  schedule:
    - cron: '0 16 * * 4'
  # 手动触发
  workflow_dispatch:
    inputs:
      ubuntu_version:
        description: '选择Ubuntu版本'
        required: true
        default: '22.04'
        type: choice
        options:
          - '22.04'
          - '24.04'
      force_rebuild:
        description: '强制重新编译（忽略缓存）'
        required: false
        default: false
        type: boolean

# 环境变量
env:
  TZ: Asia/Shanghai  # 时区设置
  CACHE_VERSION: v2  # 缓存版本号，用于缓存失效控制

# 任务定义
jobs:
  # 阶段1：生成配置哈希值
  generate-hashes:
    name: 生成配置哈希
    runs-on: ubuntu-latest
    outputs:
      hashes-file: ${{ steps.hash.outputs.hashes-file }}
      cache-key: ${{ steps.hash.outputs.cache-key }}
      config-count: ${{ steps.hash.outputs.config-count }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 生成配置哈希文件
        id: hash
        run: |
          {
            echo "# Configuration Hashes - $(date)"
            echo "# Generated by OpenWrt Build System"
            echo ""
            find $GITHUB_WORKSPACE/configs/ -type f -name "*.config" -exec sha256sum {} \; | \
              sed 's|configs/||' | \
              sort | \
              awk '{print $2 "=" $1}'
          } > $GITHUB_WORKSPACE/hashes-file
          
          CONFIG_COUNT=$(wc -l < $GITHUB_WORKSPACE/hashes-file)
          CACHE_KEY="openwrt-$(cat $GITHUB_WORKSPACE/hashes-file | sha256sum | cut -d' ' -f1)"
          
          {
            echo "hashes-file<<EOF"
            cat $GITHUB_WORKSPACE/hashes-file
            echo "EOF"
            echo "cache-key=$CACHE_KEY"
            echo "config-count=$CONFIG_COUNT"
          } >> $GITHUB_OUTPUT
          
          echo "✅ 生成哈希文件完成"
          echo "📊 配置文件数量: $CONFIG_COUNT"
          echo "🔑 缓存Key: $CACHE_KEY"

  # 阶段2：准备工具链和基础依赖
  prepare-toolchain:
    name: 准备工具链
    needs: generate-hashes
    runs-on: ubuntu-${{ github.event.inputs.ubuntu_version || '22.04' }}
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
      toolchain-ready: ${{ steps.prepare.outputs.toolchain-ready }}
      error-exit: ${{ steps.prepare.outputs.error-exit }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          docker-images: true
          large-packages: true
          swap-storage: true

      - name: 安装编译依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            flex \
            bison \
            g++ \
            gawk \
            gcc-multilib \
            g++-multilib \
            gettext \
            libelf-dev \
            libssl-dev \
            libncurses5-dev \
            libncursesw5-dev \
            python3-distutils-extra \
            rsync \
            unzip \
            python3-pyelftools \
            python3-setuptools \
            python3-pip \
            python3-pyelftools \
            zlib1g-dev \
            subversion \
            git \
            wget \
            time \
            python3 \
            ccache \
            curl

      - name: 恢复工具链缓存
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            $GITHUB_WORKSPACE/dl/
            $GITHUB_WORKSPACE/build_dir/host/
            $GITHUB_WORKSPACE/build_dir/toolchain-*/
            $GITHUB_WORKSPACE/staging_dir/host/
            $GITHUB_WORKSPACE/staging_dir/toolchain-*/
            $GITHUB_WORKSPACE/toolchain/
            $GITHUB_WORKSPACE/.ccache
          key: toolchain-${{ needs.generate-hashes.outputs.cache-key }}-${{ env.CACHE_VERSION }}-${{ runner.os }}
          restore-keys: |
            toolchain--${{ env.CACHE_VERSION }}-${{ runner.os }}

      - name: 准备工具链
        id: prepare
        if: steps.cache.outputs.cache-hit != 'true' || github.event.inputs.force_rebuild == 'true'
        run: |
          set -euo pipefail
          source $GITHUB_WORKSPACE/scripts/logger.sh
          
          step_start "准备工具链"
          
          # 创建工具链目录
          mkdir -p $GITHUB_WORKSPACE/toolchain_cache
          
          # 克隆一个基础仓库用于工具链编译
          echo "📥 克隆仓库准备工具链..."
          git clone https://github.com/laipeng668/openwrt.git $GITHUB_WORKSPACE/toolchain_cache/openwrt
          
          # 复制脚本
          cp -r $GITHUB_WORKSPACE/scripts $GITHUB_WORKSPACE/toolchain_cache/openwrt/
          cp -r $GITHUB_WORKSPACE/configs $GITHUB_WORKSPACE/toolchain_cache/openwrt/
          
          cd $GITHUB_WORKSPACE/toolchain_cache/openwrt
          
          chmod +x scripts/*.sh
          
          # 执行DIY脚本
          echo "🔧 执行DIY脚本..."
          if ! ./scripts/diy.sh openwrt ipq60xx; then
            log_error "DIY脚本执行失败"
            echo "error-exit=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # 更新feeds
          echo "📦 更新feeds..."
          if ! ./scripts/feeds update -a; then
            log_error "feeds更新失败"
            echo "error-exit=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if ! ./scripts/feeds install -a; then
            log_error "feeds安装失败"
            echo "error-exit=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # 只编译工具链，不编译固件
          echo "🔨 编译工具链..."
          if ! make toolchain/install -j$(nproc); then
            log_error "工具链编译失败"
            echo "error-exit=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          cd $GITHUB_WORKSPACE
          
          echo "toolchain-ready=true" >> $GITHUB_OUTPUT
          echo "error-exit=false" >> $GITHUB_OUTPUT
          step_end "工具链准备完成"

  # 阶段3：并行编译3个分支的基础环境
  build-base-environments:
    name: 编译基础环境 (${{ matrix.branch }})
    needs: [generate-hashes, prepare-toolchain]
    if: always() && needs.prepare-toolchain.outputs.toolchain-ready == 'true' && needs.prepare-toolchain.outputs.error-exit == 'false'
    runs-on: ubuntu-${{ github.event.inputs.ubuntu_version || '22.04' }}
    strategy:
      fail-fast: false
      matrix:
        branch: [openwrt, immwrt, libwrt]
        include:
          - branch: openwrt
            repo_url: https://github.com/laipeng668/openwrt.git
            repo_branch: master
            repo_short: openwrt
          - branch: immwrt
            repo_url: https://github.com/laipeng668/immortalwrt.git
            repo_branch: master
            repo_short: immwrt
          - branch: libwrt
            repo_url: https://github.com/laipeng668/openwrt-6.x.git
            repo_branch: k6.12-nss
            repo_short: libwrt
    timeout-minutes: 180
    outputs:
      base-ready: ${{ steps.build.outputs.base-ready }}
      base-error: ${{ steps.build.outputs.base-error }}
      base-path: ${{ steps.build.outputs.base-path }}
      branch-name: ${{ matrix.branch }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main

      - name: 恢复工具链缓存
        uses: actions/cache@v3
        with:
          path: |
            $GITHUB_WORKSPACE/dl/
            $GITHUB_WORKSPACE/build_dir/host/
            $GITHUB_WORKSPACE/build_dir/toolchain-*/
            $GITHUB_WORKSPACE/staging_dir/host/
            $GITHUB_WORKSPACE/staging_dir/toolchain-*/
            $GITHUB_WORKSPACE/toolchain/
            $GITHUB_WORKSPACE/.ccache
          key: toolchain-${{ needs.generate-hashes.outputs.cache-key }}-${{ env.CACHE_VERSION }}-${{ runner.os }}
          restore-keys: |
            toolchain--${{ env.CACHE_VERSION }}-${{ runner.os }}

      - name: 恢复基础环境缓存
        uses: actions/cache@v3
        with:
          path: |
            $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/
          key: base-env-${{ matrix.branch }}-${{ needs.generate-hashes.outputs.cache-key }}-${{ env.CACHE_VERSION }}-${{ runner.os }}
          restore-keys: |
            base-env-${{ matrix.branch }}--${{ env.CACHE_VERSION }}-${{ runner.os }}

      - name: 设置编译环境
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            flex \
            bison \
            g++ \
            gawk \
            gcc-multilib \
            g++-multilib \
            gettext \
            libelf-dev \
            libssl-dev \
            libncurses5-dev \
            libncursesw5-dev \
            python3-distutils-extra \
            rsync \
            unzip \
            python3-pyelftools \
            python3-setuptools \
            python3-pip \
            python3-pyelftools \
            zlib1g-dev
          
          echo "export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV
          echo "export CCACHE_MAXSIZE=5G" >> $GITHUB_ENV
          
          source $GITHUB_WORKSPACE/scripts/logger.sh
          log_info "开始编译 ${{ matrix.branch }} 基础环境"

      - name: 准备分支源码
        id: prepare
        run: |
          set -euo pipefail
          source $GITHUB_WORKSPACE/scripts/logger.sh
          step_start "准备 ${{ matrix.branch }} 源码"
          
          # 检查基础环境是否已存在
          if [ -d "$GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt" ]; then
            echo "📁 使用缓存的基础环境"
            cd $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt
          else
            echo "📥 克隆仓库: ${{ matrix.repo_url }}"
            mkdir -p $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}
            git clone ${{ matrix.repo_url }} $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt
            cd $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt
            
            # 复制脚本和配置
            cp -r $GITHUB_WORKSPACE/scripts ./
            cp -r $GITHUB_WORKSPACE/configs ./
            
            chmod +x scripts/*.sh
            
            # 执行DIY脚本
            echo "🔧 执行DIY脚本..."
            if ! ./scripts/diy.sh ${{ matrix.branch }} ipq60xx; then
              log_error "DIY脚本执行失败"
              echo "base-error=true" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # 更新feeds
            echo "📦 更新feeds..."
            if ! ./scripts/feeds update -a; then
              log_error "feeds更新失败"
              echo "base-error=true" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            if ! ./scripts/feeds install -a; then
              log_error "feeds安装失败"
              echo "base-error=true" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          step_end "源码准备完成"

      - name: 合并基础配置
        id: build
        run: |
          set -euo pipefail
          source $GITHUB_WORKSPACE/scripts/logger.sh
          step_start "合并基础配置"
          
          cd $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt
          
          # 合并配置（优先级从低到高）
          echo "📝 合并芯片配置: base_ipq60xx.config"
          cat configs/base_ipq60xx.config > .config
          
          echo "📝 合并分支配置: base_${{ matrix.branch }}.config"
          cat configs/base_${{ matrix.branch }}.config >> .config
          
          # 格式化配置
          make defconfig
          
          # 提取设备列表
          echo "🔍 提取设备列表..."
          local devices=$(grep "CONFIG_TARGET_DEVICE_.*_DEVICE_.*=y" .config | \
                         sed 's/.*_DEVICE_\(.*\)=y/\1' | \
                         sort -u)
          
          local device_count=$(echo "$devices" | wc -l)
          echo "📊 检测到 $device_count 个设备:"
          echo "$devices" | while read device; do
            echo "  - $device"
          done
          
          # 检查基础配置
          echo "📊 基础配置统计:"
          echo "  - 总配置项: $(grep -c "^CONFIG_" .config)"
          echo "  - 设备数量: $device_count"
          echo "  - 内核配置: $(grep "^CONFIG_KERNEL" .config | wc -l)"
          
          # 保存基础环境状态
          echo "base-ready=true" >> $GITHUB_OUTPUT
          echo "base-error=false" >> $GITHUB_OUTPUT
          echo "base-path=base_env_${{ matrix.branch }}/openwrt" >> $GITHUB_OUTPUT
          
          step_end "基础配置合并完成"

      - name: 检查基础软件包
        run: |
          set -euo pipefail
          source $GITHUB_WORKSPACE/scripts/logger.sh
          cd $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt
          step_start "检查基础软件包"
          
          # 检查基础软件包
          if ! $GITHUB_WORKSPACE/scripts/check_packages.sh; then
            log_error "基础软件包检查失败"
            echo "⚠️ 基础软件包缺失，将缓存退出等待修复"
            exit 1
          fi
          
          step_end "基础软件包检查完成"

      - name: 编译基础环境
        if: steps.build.outputs.base-error == 'false'
        run: |
          set -euo pipefail
          source $GITHUB_WORKSPACE/scripts/logger.sh
          cd $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt
          step_start "编译基础环境"
          
          # 编译基础系统（不包含额外软件包）
          echo "🔨 编译基础系统..."
          if ! make -j$(nproc) 2>&1 | tee compile.log; then
            log_error "基础环境编译失败！"
            tail -n 1000 compile.log > error.log
            exit 1
          fi
          
          step_end "基础环境编译完成"

      - name: 上传基础环境
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: base-env-${{ matrix.branch }}
          path: |
            $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/
            !base_env_${{ matrix.branch }}/openwrt/build_dir/*
            !base_env_${{ matrix.branch }}/openwrt/staging_dir/*
            !base_env_${{ matrix.branch }}/openwrt/tmp/*
          retention-days: 7

  # 检查是否所有基础环境都成功
  check-base-environments:
    name: 检查基础环境状态
    needs: build-base-environments
    if: always()
    runs-on: ubuntu-latest
    outputs:
      all-ready: ${{ steps.check.outputs.all-ready }}
      failed-branches: ${{ steps.check.outputs.failed-branches }}
      openwrt-ready: ${{ steps.check.outputs.openwrt-ready }}
      immwrt-ready: ${{ steps.check.outputs.immwrt-ready }}
      libwrt-ready: ${{ steps.check.outputs.libwrt-ready }}
    steps:
      - name: 检查基础环境状态
        id: check
        run: |
          # 检查每个分支的状态
          local failed_branches=""
          local all_ready="true"
          local openwrt_ready="false"
          local immwrt_ready="false"
          local libwrt_ready="false"
          
          # 检查openwrt
          if [ "${{ needs.build-base-environments.result }}" = "success" ]; then
            echo "✅ openwrt 基础环境成功"
            openwrt_ready="true"
          else
            echo "❌ openwrt 基础环境失败"
            all_ready="false"
            failed_branches="$failed_branches openwrt"
          fi
          
          # 检查immwrt
          if [ "${{ needs.build-base-environments.result }}" = "success" ]; then
            echo "✅ immwrt 基础环境成功"
            immwrt_ready="true"
          else
            echo "❌ immwrt 基础环境失败"
            all_ready="false"
            failed_branches="$failed_branches immwrt"
          fi
          
          # 检查libwrt
          if [ "${{ needs.build-base-environments.result }}" = "success" ]; then
            echo "✅ libwrt 基础环境成功"
            libwrt_ready="true"
          else
            echo "❌ libwrt 基础环境失败"
            all_ready="false"
            failed_branches="$failed_branches libwrt"
          fi
          
          echo "all-ready=$all_ready" >> $GITHUB_OUTPUT
          echo "failed-branches=$failed_branches" >> $GITHUB_OUTPUT
          echo "openwrt-ready=$openwrt_ready" >> $GITHUB_OUTPUT
          echo "immwrt-ready=$immwrt_ready" >> $GITHUB_OUTPUT
          echo "libwrt-ready=$libwrt_ready" >> $GITHUB_OUTPUT
          
          if [ "$all_ready" = "true" ]; then
            echo "✅ 所有基础环境准备完成"
          else
            echo "❌ 以下基础环境失败: $failed_branches"
            echo "⚠️ 将缓存退出，等待用户修复软件包问题"
          fi

  # 阶段4：并行编译9个软件配置
  build-configs:
    name: 编译固件 (${{ matrix.branch }}-${{ matrix.config }})
    needs: [generate-hashes, check-base-environments]
    if: always() && needs.check-base-environments.outputs.all-ready == 'true'
    runs-on: ubuntu-${{ github.event.inputs.ubuntu_version || '22.04' }}
    strategy:
      fail-fast: false
      matrix:
        branch: [openwrt, immwrt, libwrt]
        config: [Pro, Max, Ultra]
        include:
          - branch: openwrt
            repo_url: https://github.com/laipeng668/openwrt.git
            repo_branch: master
            repo_short: openwrt
            should-run: ${{ needs.check-base-environments.outputs.openwrt-ready == 'true' }}
          - branch: immwrt
            repo_url: https://github.com/laipeng668/immortalwrt.git
            repo_branch: master
            repo_short: immwrt
            should-run: ${{ needs.check-base-environments.outputs.immwrt-ready == 'true' }}
          - branch: libwrt
            repo_url: https://github.com/laipeng668/openwrt-6.x.git
            repo_branch: k6.12-nss
            repo_short: libwrt
            should-run: ${{ needs.check-base-environments.outputs.libwrt-ready == 'true' }}
    timeout-minutes: 180
    
    steps:
      - name: 检查是否应该运行
        run: |
          if [ "${{ matrix.should-run }}" != "true" ]; then
            echo "❌ ${{ matrix.branch }} 基础环境未准备好，跳过编译"
            exit 1
          else
            echo "✅ ${{ matrix.branch }} 基础环境已准备好，开始编译"
          fi

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main

      - name: 恢复工具链缓存
        uses: actions/cache@v3
        with:
          path: |
            $GITHUB_WORKSPACE/dl/
            $GITHUB_WORKSPACE/build_dir/host/
            $GITHUB_WORKSPACE/build_dir/toolchain-*/
            $GITHUB_WORKSPACE/staging_dir/host/
            $GITHUB_WORKSPACE/staging_dir/toolchain-*/
            $GITHUB_WORKSPACE/toolchain/
            $GITHUB_WORKSPACE/.ccache
          key: toolchain-${{ needs.generate-hashes.outputs.cache-key }}-${{ env.CACHE_VERSION }}-${{ runner.os }}

      - name: 下载基础环境
        uses: actions/download-artifact@v3
        with:
          name: base-env-${{ matrix.branch }}
          path: $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}

      - name: 设置编译环境
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            flex \
            bison \
            g++ \
            gawk \
            gcc-multilib \
            g++-multilib \
            gettext \
            libelf-dev \
            libssl-dev \
            libncurses5-dev \
            libncursesw5-dev \
            python3-distutils-extra \
            rsync \
            unzip \
            python3-pyelftools \
            python3-setuptools \
            python3-pip \
            python3-pyelftools \
            zlib1g-dev
          
          echo "export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV
          echo "export CCACHE_MAXSIZE=5G" >> $GITHUB_ENV
          
          source $GITHUB_WORKSPACE/scripts/logger.sh
          log_info "开始编译 ${{ matrix.branch }}-${{ matrix.config }}"

      - name: 准备编译环境
        run: |
          set -euo pipefail
          source $GITHUB_WORKSPACE/scripts/logger.sh
          step_start "准备编译环境"
          
          cd $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt
          
          # 确保脚本存在
          if [ ! -d "scripts" ]; then
            cp -r $GITHUB_WORKSPACE/scripts ./
            cp -r $GITHUB_WORKSPACE/configs ./
            chmod +x scripts/*.sh
          fi
          
          step_end "编译环境准备完成"

      - name: 合并软件包配置
        run: |
          set -euo pipefail
          source $GITHUB_WORKSPACE/scripts/logger.sh
          cd $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt
          step_start "合并软件包配置"
          
          # 在基础配置上合并软件包配置（最高优先级）
          echo "📝 合并软件包配置: ${{ matrix.config }}.config"
          cat configs/${{ matrix.config }}.config >> .config
          
          # 格式化配置
          make defconfig
          
          # 显示配置统计
          echo "📊 配置统计:"
          echo "  - 总配置项: $(grep -c "^CONFIG_" .config)"
          echo "  - Luci应用: $(grep -c "^CONFIG_PACKAGE_luci-app.*=y" .config)"
          echo "  - 其他软件包: $(grep -c "^CONFIG_PACKAGE_.*=y" .config | grep -v "luci-app")"
          
          step_end "软件包配置合并完成"

      - name: 检查软件包
        run: |
          set -euo pipefail
          source $GITHUB_WORKSPACE/scripts/logger.sh
          cd $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt
          step_start "检查软件包"
          
          # 检查软件包依赖
          if ! $GITHUB_WORKSPACE/scripts/check_packages.sh; then
            log_error "软件包检查失败"
            
            # 尝试自动修复
            echo "🔧 尝试自动修复软件包问题..."
            # 这里可以添加自动修复逻辑
            
            # 如果修复失败，生成详细错误报告
            echo "📋 生成详细错误报告..."
            {
              echo "# 软件包错误报告"
              echo "分支: ${{ matrix.branch }}"
              echo "配置: ${{ matrix.config }}"
              echo "时间: $(date)"
              echo ""
              echo "错误详情:"
              cat error.log 2>/dev/null || echo "无错误日志"
              echo ""
              echo "直接访问链接:"
              echo "- 完整日志: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
            } > package_error_report.md
            
            exit 1
          fi
          
          step_end "软件包检查完成"

      - name: 编译固件
        run: |
          set -euo pipefail
          source $GITHUB_WORKSPACE/scripts/logger.sh
          cd $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt
          step_start "编译固件"
          
          # 清理之前的构建（如果需要）
          make clean
          
          # 编译固件
          echo "🔥 开始编译固件..."
          if ! make -j$(nproc) 2>&1 | tee compile.log; then
            log_error "编译失败！"
            tail -n 1000 compile.log > error.log
            exit 1
          fi
          
          step_end "固件编译完成"

      - name: 处理产出物
        run: |
          set -euo pipefail
          source $GITHUB_WORKSPACE/scripts/logger.sh
          cd $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt
          step_start "处理产出物"
          
          $GITHUB_WORKSPACE/scripts/process_artifacts.sh ${{ matrix.branch }} ${{ matrix.config }} ipq60xx
          
          step_end "产出物处理完成"

      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-${{ matrix.branch }}-${{ matrix.config }}
          path: |
            $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt/artifacts/
            $GITHUB_WORKSPACE/base_env_${{ matrix.branch }}/openwrt/*.log
          retention-days: 7

  # 阶段5：创建Release
  create-release:
    name: 创建Release
    needs: [generate-hashes, build-configs]
    if: always() && needs.build-configs.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v3
        with:
          path: $GITHUB_WORKSPACE/artifacts

      - name: 准备发布内容
        run: |
          set -euo pipefail
          source $GITHUB_WORKSPACE/scripts/logger.sh
          step_start "准备发布"
          
          mkdir -p $GITHUB_WORKSPACE/release
          
          echo "📦 收集固件文件..."
          find $GITHUB_WORKSPACE/artifacts -name "*.bin" -exec cp {} $GITHUB_WORKSPACE/release/ \;
          
          echo "📦 打包配置文件..."
          find $GITHUB_WORKSPACE/artifacts -name "*.config*" -exec cp {} $GITHUB_WORKSPACE/release/ \;
          tar -czf $GITHUB_WORKSPACE/release/ipq60xx-config.tar.gz -C $GITHUB_WORKSPACE/release $(ls $GITHUB_WORKSPACE/release/*.config* | xargs -n1 basename)
          
          echo "📦 打包软件包..."
          mkdir -p $GITHUB_WORKSPACE/release/packages
          find $GITHUB_WORKSPACE/artifacts -name "*.ipk" -exec cp {} $GITHUB_WORKSPACE/release/packages/ \; 2>/dev/null || true
          tar -czf $GITHUB_WORKSPACE/release/ipq60xx-app.tar.gz -C $GITHUB_WORKSPACE/release/packages .
          
          echo "📦 打包日志..."
          find $GITHUB_WORKSPACE/artifacts -name "*.log" -exec cp {} $GITHUB_WORKSPACE/release/ \;
          tar -czf $GITHUB_WORKSPACE/release/ipq60xx-log.tar.gz -C $GITHUB_WORKSPACE/release $(ls $GITHUB_WORKSPACE/release/*.log | xargs -n1 basename)
          
          echo "📝 生成发布说明..."
          $GITHUB_WORKSPACE/scripts/prepare_release.sh > $GITHUB_WORKSPACE/release_notes.md
          
          step_end "发布准备完成"

      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ipq60xx-$(date +%Y%m%d)
          body_path: $GITHUB_WORKSPACE/release_notes.md
          files: |
            $GITHUB_WORKSPACE/release/*.bin
            $GITHUB_WORKSPACE/release/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理旧版本
        run: |
          echo "🧹 清理旧版本..."
          gh release list --repo ${{ github.repository }} --limit 20 | \
            tail -n +8 | \
            awk '{print $1}' | \
            xargs -I {} gh release delete {} --repo ${{ github.repository }} --yes || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
