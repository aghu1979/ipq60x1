# ===============================================================
# 工作流名称，会显示在 GitHub Actions 的页面上
# ===============================================================
name: Multi-Config OpenWrt Build

# ===============================================================
# 触发器：定义何时运行此工作流
# 1. workflow_dispatch: 手动触发
# 2. push: 代码推送到 main 分支时触发（仅当特定文件变更）
# 3. schedule: 定时触发 (UTC 时间周四 16:00 = 北京时间周五 00:00)
# ===============================================================
on:
  workflow_dispatch:
    inputs:
      branch:
        description: '选择要编译的分支'
        required: true
        default: 'immwrt'
        type: choice
        options:
          - immwrt
          # - openwrt  # 未来可轻松添加
          # - libwrt   # 未来可轻松添加
      config:
        description: '选择要编译的配置'
        required: true
        default: 'Pro'
        type: choice
        options:
          - All
          - Pro
          - Max
          - Ultra
  
  push:
    branches:
      - main # 假设您的主分支是 main，如果不是请修改
    paths:
      - '.github/configs/**' # 只有配置文件变更时才触发
      - '.github/scripts/**' # 只有脚本变更时才触发
      - '.github/workflows/build.yml' # 工作流本身变更时也触发

  schedule:
    # cron 表达式，UTC 时间。'0 16 * * 4' 表示每周四 16:00 (北京时间周五 00:00)
    - cron: '0 16 * * 4'

# ===============================================================
# 全局环境变量：这些变量可以在所有 Job 和所有 Step 中引用
# ===============================================================
env:
  DIY_P1_SH: .github/scripts/diy.sh
  DIY_P2_SH: .github/scripts/repo.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

# ===============================================================
# Jobs: 定义要执行的任务列表
# ===============================================================
jobs:
  # -----------------------------------------------------------------
  # Job 1: setup-matrix
  # 作用：根据触发方式和用户输入，动态生成一个编译矩阵
  # -----------------------------------------------------------------
  setup-matrix:
    name: 准备编译矩阵
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: 生成编译矩阵
        id: set-matrix
        run: |
          # 定义所有可能的编译组合 (单行 JSON，确保格式纯净)
          ALL_COMBITIONS='[{"branch": "immwrt", "config": "Pro", "repo_url": "https://github.com/laipeng668/immortalwrt.git", "repo_branch": "master", "repo_short": "immwrt"}, {"branch": "immwrt", "config": "Max", "repo_url": "https://github.com/laipeng668/immortalwrt.git", "repo_branch": "master", "repo_short": "immwrt"}, {"branch": "immwrt", "config": "Ultra", "repo_url": "https://github.com/laipeng668/immortalwrt.git", "repo_branch": "master", "repo_short": "immwrt"}]'

          # 判断触发方式，并设置默认的分支和配置
          # 如果是手动触发，则使用用户选择的值
          # 如果是 push 或 schedule 触发，则使用默认值
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            INPUT_BRANCH="${{ github.event.inputs.branch }}"
            INPUT_CONFIG="${{ github.event.inputs.config }}"
          else
            # 自动触发时的默认行为：编译 immwrt 分支的所有配置
            INPUT_BRANCH="immwrt"
            INPUT_CONFIG="All"
          fi
          
          echo "Triggered by: ${{ github.event_name }}"
          echo "Selected branch: $INPUT_BRANCH"
          echo "Selected config: $INPUT_CONFIG"

          # 【关键修正】使用 `jq -c` 生成压缩的单行 JSON，避免 GITHUB_OUTPUT 格式错误
          FINAL_MATRIX=$(echo "$ALL_COMBITIONS" | jq -c --arg branch "$INPUT_BRANCH" --arg config "$INPUT_CONFIG" '
            [
              .[] | 
              select(
                (.branch == $branch) and 
                ($config == "All" or .config == $config)
              )
            ]
          ')

          # 将最终的 JSON 矩阵输出
          echo "Generated matrix for build job: $FINAL_MATRIX"
          echo "matrix=$FINAL_MATRIX" >> $GITHUB_OUTPUT

  # -----------------------------------------------------------------
  # Job 2: build
  # 作用：执行实际的固件编译任务
  # -----------------------------------------------------------------
  build:
    name: 编译 ${{ matrix.repo_short }} (${{ matrix.config }})
    needs: setup-matrix
    if: fromJson(needs.setup-matrix.outputs.matrix)[0] != null
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 初始化编译环境
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2204)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 缓存基础环境
        id: cache-base
        uses: actions/cache@v4
        with:
          path: |
            openwrt/toolchain
            openwrt/dl
          key: ${{ runner.os }}-base-${{ matrix.repo_short }}-${{ hashFiles('**/base_ipq60xx.config', '**/base_immwrt.config', '**/base_openwrt.config', '**/base_libwrt.config') }}
          restore-keys: |
            ${{ runner.os }}-base-${{ matrix.repo_short }}-

      - name: 克隆源代码
        run: |
          df -hT $PWD
          git clone ${{ matrix.repo_url }} -b ${{ matrix.repo_branch }} openwrt
          cd openwrt
          git log -1 --pretty=format:"%h %s"

      - name: 加载自定义脚本和软件源
        run: |
          [ -e $DIY_P1_SH ] && chmod +x $DIY_P1_SH && cd openwrt && $GITHUB_WORKSPACE/$DIY_P1_SH
          [ -e $DIY_P2_SH ] && chmod +x $DIY_P2_SH && cd openwrt && $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: 生成最终配置文件
        run: |
          cd openwrt
          echo "Generating .config for ${{ matrix.config }} on ${{ matrix.repo_short }}"
          cat $GITHUB_WORKSPACE/.github/configs/base_ipq60xx.config >> .config
          cat $GITHUB_WORKSPACE/.github/configs/base_${{ matrix.repo_short }}.config >> .config
          cat $GITHUB_WORKSPACE/.github/configs/${{ matrix.config }}.config >> .config
          make defconfig

      - name: 下载软件包
        id: download
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 上传固件
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
        with:
          name: ${{ matrix.repo_short }}_${{ matrix.config }}_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: |
            openwrt/bin/targets/*/*
            !openwrt/bin/targets/*/*.manifest
            !openwrt/bin/targets/*/*.json
          retention-days: 30
