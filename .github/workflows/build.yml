# .github/workflows/build.yml
name: ImmortalWrt IPQ60xx Auto Build

# 触发条件：北京时间每周五0点 (UTC+8 = UTC周四16:00) 或手动触发
on:
  schedule:
    - cron: '0 16 * * 4' # UTC 周四 16:00 = 北京时间 周五 00:00
  workflow_dispatch:
    inputs:
      os_version:
        description: '选择操作系统版本'
        required: true
        default: 'ubuntu-22.04'
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-24.04

# 全局环境变量
env:
  CHIPSET: ipq60xx
  BRANCH: immwrt
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: scripts/diy.sh
  DIY_P2_SH: scripts/repo.sh
  UPLOAD_BIN_DIR: upload
  UPLOAD_FIRMWARE_DIR: firmware
  CONFIG_FILE: .config
  # 定义输出颜色和图标
  COLOR_ERROR: '\033[1;31m' # 红色
  COLOR_WARN: '\033[1;33m'  # 黄色
  COLOR_INFO: '\033[1;36m'  # 青色
  COLOR_SUCCESS: '\033[1;32m' # 绿色
  COLOR_RESET: '\033[0m'    # 重置
  ICON_ERROR: '❌'
  ICON_WARN: '⚠️'
  ICON_INFO: 'ℹ️'
  ICON_SUCCESS: '✅'

jobs:
  build:
    name: 🚀 编译固件
    runs-on: ${{ inputs.os_version || 'ubuntu-22.04' }}
    permissions:
      contents: write
      releases: write

    steps:
      # 步骤 1: 检出代码
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      # 步骤 2: 显示磁盘空间
      - name: 💾 显示编译前磁盘空间
        run: |
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 编译前磁盘空间: ${{ env.COLOR_RESET}}"
          df -hT

      # 步骤 3: 清理磁盘空间
      - name: 🧹 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      # 步骤 4: 显示清理后磁盘空间
      - name: 💾 显示清理后磁盘空间
        run: |
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 清理后磁盘空间: ${{ env.COLOR_RESET}}"
          df -hT

      # 步骤 5: 生成哈希文件用于缓存键
      - name: 🔑 生成哈希文件
        id: generate-hashes
        run: |
          # 设置严格模式
          set -euo pipefail
          # 定义需要计算哈希的文件列表
          HASH_FILES=(
            "configs/base_${{ env.CHIPSET }}.config"
            "configs/base_${{ env.BRANCH }}.config"
            "${{ env.DIY_P1_SH }}"
            "${{ env.DIY_P2_SH }}"
          )
          # 检查文件是否存在
          for file in "${HASH_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo -e "${{ env.COLOR_ERROR}}${{ env.ICON_ERROR}} 错误: 文件 $file 不存在！${{ env.COLOR_RESET}}"
              exit 1
            fi
          done
          # 计算所有文件的组合哈希值
          HASH_VALUE=$(cat "${HASH_FILES[@]}" | sha256sum | cut -d' ' -f1)
          echo "hashes-value=$HASH_VALUE" >> $GITHUB_OUTPUT
          echo -e "${{ env.COLOR_SUCCESS}}${{ env.ICON_SUCCESS}} 缓存哈希值已生成: $HASH_VALUE${{ env.COLOR_RESET}}"

      # 步骤 6: 恢复/创建缓存
      - name: 📦 恢复/创建缓存
        uses: actions/cache@v4
        with:
          path: |
            ./dl
            ./ccache
            ./toolchain
            ./build_dir
            ./staging_dir
            ./tmp
          key: ${{ env.CHIPSET }}-${{ env.BRANCH }}-${{ steps.generate-hashes.outputs.hashes-value }}
          restore-keys: |
            ${{ env.CHIPSET }}-${{ env.BRANCH }}-

      # 步骤 7: 安装编译依赖
      - name: 🛠️ 安装编译依赖
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* # 移除可能存在问题的源
          sudo apt-get update
          sudo apt-get install -y $(curl -fsSL git.io/depends-ubuntu-2204)
          echo -e "${{ env.COLOR_SUCCESS}}${{ env.ICON_SUCCESS}} 依赖安装完成${{ env.COLOR_RESET}}"

      # 步骤 8: 克隆源码并准备基础环境 (仅在缓存未命中时执行)
      - name: 🌱 准备基础环境
        run: |
          # 设置严格模式
          set -euo pipefail
          # 如果工具链不存在，则认为缓存未命中，需要准备环境
          if [ ! -d "toolchain" ]; then
            echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 缓存未命中，开始准备基础编译环境...${{ env.COLOR_RESET}}"
            
            # 克隆源码
            git clone ${{ env.REPO_URL }} immortalwrt
            cd immortalwrt
            
            # 合并基础配置文件
            echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 合并基础配置文件...${{ env.COLOR_RESET}}"
            cat ../configs/base_${{ env.CHIPSET }}.config > .config
            cat ../configs/base_${{ env.BRANCH }}.config >> .config
            
            # 运行自定义脚本
            echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 执行自定义脚本 repo.sh...${{ env.COLOR_RESET}}"
            chmod +x ../${{ env.DIY_P2_SH }}
            ../${{ env.DIY_P2_SH }}
            
            # 更新和安装软件源
            echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 更新和安装 feeds...${{ env.COLOR_RESET}}"
            ./scripts/feeds update -a
            ./scripts/feeds install -a
            
            # 扩展配置，解决依赖
            echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 运行 defconfig 扩展配置...${{ env.COLOR_RESET}}"
            make defconfig
            
            # 预编译工具链 (这是最耗时的部分之一)
            echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 预编译工具链...${{ env.COLOR_RESET}}"
            make toolchain/install -j$(nproc)
            
            echo -e "${{ env.COLOR_SUCCESS}}${{ env.ICON_SUCCESS}} 基础环境准备完成，已缓存。${{ env.COLOR_RESET}}"
          else
            echo -e "${{ env.COLOR_SUCCESS}}${{ env.ICON_SUCCESS}} 缓存命中，跳过基础环境准备。${{ env.COLOR_RESET}}"
          fi

      # 步骤 9: 并行编译不同配置的固件
      - name: 🏗️ 并行编译固件
        strategy:
          fail-fast: false # 一个配置失败，其他配置继续编译
          matrix:
            profile: [Pro, Max, Ultra]
        run: |
          # 设置严格模式
          set -euo pipefail
          # 定义日志文件
          LOG_FILE="build_${{ matrix.profile }}.log"
          # 进入源码目录
          cd immortalwrt
          
          # --- 开始编译配置 ---
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} ---------- 开始编译配置: ${{ matrix.profile }} ----------${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_FIRMWARE_DIR }}/$LOG_FILE"
          
          # 1. 合并配置文件
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 步骤 1: 合并配置文件...${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_FIRMWARE_DIR }}/$LOG_FILE"
          cp .config ../${{ env.CONFIG_FILE }}.bak # 备份基础配置
          cat ../configs/${{ matrix.profile }}.config >> .config
          
          # 2. 检查 LuCI 软件包 (核心保障)
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 步骤 2: 检查 LuCI 软件包依赖...${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_FIRMWARE_DIR }}/$LOG_FILE"
          chmod +x ../scripts/check_luci.sh
          # 调用检查脚本，如果失败则会自动退出
          ../scripts/check_luci.sh .config | tee -a "../${{ env.UPLOAD_FIRMWARE_DIR }}/$LOG_FILE"
          
          # 3. 开始编译
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 步骤 3: 开始编译固件...${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_FIRMWARE_DIR }}/$LOG_FILE"
          make -j$(nproc) | tee -a "../${{ env.UPLOAD_FIRMWARE_DIR }}/$LOG_FILE"
          
          # 4. 运行 DIY 脚本
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 步骤 4: 执行 DIY 脚本...${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_FIRMWARE_DIR }}/$LOG_FILE"
          chmod +x ../${{ env.DIY_P1_SH }}
          ../${{ env.DIY_P1_SH }}
          
          # 5. 收集产物
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 步骤 5: 收集编译产物...${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_FIRMWARE_DIR }}/$LOG_FILE"
          
          # 提取设备名
          DEVICES=$(grep -oE 'CONFIG_TARGET_DEVICE_.*_DEVICE_(.*)=y' ../configs/base_${{ env.CHIPSET }}.config | sed -E 's/CONFIG_TARGET_DEVICE_.*_DEVICE_(.*)=y/\1/')
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 发现设备: $DEVICES${{ env.COLOR_RESET}}" | tee -a "../${{ env.UPLOAD_FIRMWARE_DIR }}/$LOG_FILE"
          
          # 创建临时目录
          mkdir -p "../${{ env.UPLOAD_FIRMWARE_DIR }}/${{ matrix.profile }}"
          mkdir -p "../${{ env.UPLOAD_BIN_DIR }}/packages"
          
          for DEVICE in $DEVICES; do
            # 复制并重命名固件
            find bin/targets/*/* -type f \( -name "*${DEVICE}*-squashfs-sysupgrade.bin" -o -name "*${DEVICE}*-squashfs-factory.bin" \) -exec cp {} "../${{ env.UPLOAD_FIRMWARE_DIR }}/${{ matrix.profile }}/" \;
            # 复制配置、清单等信息
            cp .config "../${{ env.UPLOAD_FIRMWARE_DIR }}/${{ matrix.profile }}/${{ env.BRANCH }}-${{ env.CHIPSET }}-${DEVICE}-${{ matrix.profile }}.config"
            cp bin/targets/*/*/${DEVICE}.manifest "../${{ env.UPLOAD_FIRMWARE_DIR }}/${{ matrix.profile }}/${{ env.BRANCH }}-${{ env.CHIPSET }}-${DEVICE}-${{ matrix.profile }}.manifest"
            cp .config.buildinfo "../${{ env.UPLOAD_FIRMWARE_DIR }}/${{ matrix.profile }}/${{ env.BRANCH }}-${{ env.CHIPSET }}-${DEVICE}-${{ matrix.profile }}.config.buildinfo"
          done
          
          # 复制所有 ipk 文件，允许覆盖
          cp bin/packages/**/*.ipk ../${{ env.UPLOAD_BIN_DIR }}/packages/ 2>/dev/null || true
          
          # 重命名固件
          cd "../${{ env.UPLOAD_FIRMWARE_DIR }}/${{ matrix.profile }}"
          for f in *-squashfs-*.bin; do
            # 使用 shopt 开启大小写不敏感匹配
            shopt -s nocasematch
            if [[ "$f" =~ ^(.+)-(${{ env.CHIPSET }})-(.+)-squashfs-(.+)\.bin$ ]]; then
              # 重新命名: 分支缩写-设备名-类型-配置.bin
              # 注意：这里的正则需要根据实际文件名调整，示例为通用格式
              # 实际文件名可能是 qualcommax-ipq60xx-jdcloud_re-ss-01-squashfs-sysupgrade.bin
              # 我们提取设备名和类型
              TYPE=${BASH_REMATCH[4]}
              # 从文件名中提取设备名，这部分比较 tricky，假设设备名在 -squashfs 之前
              DEVICE_NAME=$(echo "$f" | sed -E "s/.*-${{ env.CHIPSET }}-(.+)-squashfs-.*/\1/")
              mv "$f" "${{ env.BRANCH }}-${DEVICE_NAME}-${TYPE}-${{ matrix.profile }}.bin"
            fi
            shopt -u nocasematch
          done
          
          echo -e "${{ env.COLOR_SUCCESS}}${{ env.ICON_SUCCESS}} ---------- 配置 ${{ matrix.profile }} 编译完成 ----------${{ env.COLOR_RESET}}" | tee -a "../../${{ env.UPLOAD_FIRMWARE_DIR }}/$LOG_FILE"
          
          # 恢复基础配置，供下一个 matrix 使用
          cd ../../immortalwrt
          cp ../${{ env.CONFIG_FILE }}.bak .config

      # 步骤 10: 打包并上传产物
      - name: 📦 打包并上传产物
        if: always() # 即使前面有失败，也尝试上传已生成的产物
        run: |
          # 设置严格模式
          set -euo pipefail
          # 打包配置文件
          cd ${{ env.UPLOAD_FIRMWARE_DIR }}
          tar -czvf ../${{ env.UPLOAD_BIN_DIR }}/${{ env.CHIPSET }}-config.tar.gz ./*/*.config ./*/*.config.buildinfo ./*/*.manifest
          # 打包所有 ipk 文件
          cd ../${{ env.UPLOAD_BIN_DIR }}
          tar -czvf ${{ env.CHIPSET }}-app.tar.gz packages/
          # 打包日志
          cd ../${{ env.UPLOAD_FIRMWARE_DIR }}
          tar -czvf ../${{ env.UPLOAD_BIN_DIR }}/${{ env.CHIPSET }}-log.tar.gz *.log
          
          # 上传 Artifact
          cd ../${{ env.UPLOAD_BIN_DIR }}
          echo -e "${{ env.COLOR_INFO}}${{ env.ICON_INFO}} 上传编译产物到 GitHub Artifacts...${{ env.COLOR_RESET}}"
          # 使用 zip 命令打包，因为 artifact 上传对单个文件大小有限制，但zip可以压缩
          zip -r firmware.zip ${{ env.UPLOAD_FIRMWARE_DIR }}/
          zip -r ${{ env.CHIPSET }}-config.zip ${{ env.CHIPSET }}-config.tar.gz
          zip -r ${{ env.CHIPSET }}-app.zip ${{ env.CHIPSET }}-app.tar.gz
          zip -r ${{ env.CHIPSET }}-log.zip ${{ env.CHIPSET }}-log.tar.gz

      - name: 📤 上传固件 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware_all
          path: ${{ env.UPLOAD_BIN_DIR }}/firmware.zip
          retention-days: 7

      - name: 📤 上传配置 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: config_all
          path: ${{ env.UPLOAD_BIN_DIR }}/${{ env.CHIPSET }}-config.zip
          retention-days: 7

      - name: 📤 上传软件包 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: packages_all
          path: ${{ env.UPLOAD_BIN_DIR }}/${{ env.CHIPSET }}-app.zip
          retention-days: 7

      - name: 📤 上传日志 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: logs_all
          path: ${{ env.UPLOAD_BIN_DIR }}/${{ env.CHIPSET }}-log.zip
          retention-days: 7

      # 步骤 11: 发布到 Release
      - name: 🚀 发布到 GitHub Release
        if: success() # 只有所有编译任务都成功才发布
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.CHIPSET }}-${{ github.run_number }}-${{ github.sha }}
          body: |
            ## 🎉 ImmortalWrt ${{ env.CHIPSET }} 固件发布
            - **作者**: Mary
            - **发布时间**: ${{ github.event.head_commit.timestamp }}
            - **源码分支**: ${{ env.BRANCH }}
            - **编译配置**: Pro, Max, Ultra
            - **内核版本**: $(cd immortalwrt && make kernelconfig | grep CONFIG_KERNEL -m 1 | cut -d'=' -f2)
            
            ---
            
            ## 📋 固件信息
            - **默认管理地址**: 192.168.111.1
            - **默认用户**: root
            - **默认密码**: 无 (直接回车)
            - **默认WIFI密码**: 12345678
            
            ---
            
            ## 📦 包含的 LuCI 应用列表
            $(cd ${{ env.UPLOAD_BIN_DIR }} && tar -tzf ${{ env.CHIPSET }}-app.tar.gz | grep luci-app | sed 's/packages\///' | sort | uniq)
            
            ---
            
            ## ⬇️ 下载说明
            请根据您的设备型号和所需配置下载对应的固件文件。
            - `immwrt-<设备名>-<factory/sysupgrade>-<Pro/Max/Ultra>.bin` 是固件文件。
            - `${{ env.CHIPSET }}-config.tar.gz` 包含所有配置、清单和构建信息。
            - `${{ env.CHIPSET }}-app.tar.gz` 包含所有编译出的软件包。
            - `${{ env.CHIPSET }}-log.tar.gz` 包含本次编译的详细日志。

          files: |
            ${{ env.UPLOAD_BIN_DIR }}/firmware.zip
            ${{ env.UPLOAD_BIN_DIR }}/${{ env.CHIPSET }}-config.zip
            ${{ env.UPLOAD_BIN_DIR }}/${{ env.CHIPSET }}-app.zip
            ${{ env.UPLOAD_BIN_DIR }}/${{ env.CHIPSET }}-log.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
